{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\cvd-risk-project\\\\frontend\\\\cvd-risk-frontend\\\\src\\\\context\\\\AppContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [currentChat, setCurrentChat] = useState([]);\n  const [predictionData, setPredictionData] = useState(null);\n  const [dashboardData, setDashboardData] = useState(null);\n\n  // ENHANCED: Batch results persistence with better integration  \n  const [batchResults, setBatchResults] = useState(null);\n  const [batchFileName, setBatchFileName] = useState('');\n\n  // ENHANCED: Complete chat history management with session support\n  const [chatHistory, setChatHistory] = useState({}); // Store all conversations by session\n  const [activeSessionId, setActiveSessionId] = useState(null);\n  const navigate = useNavigate();\n\n  // ENHANCED: Initialize from localStorage with better error handling\n  useEffect(() => {\n    try {\n      // Load basic app state\n      const savedChat = localStorage.getItem('currentChat');\n      const savedPrediction = localStorage.getItem('predictionData');\n      const savedDashboard = localStorage.getItem('dashboardData');\n\n      // Load batch results\n      const savedBatchResults = localStorage.getItem('batchResults');\n      const savedBatchFileName = localStorage.getItem('batchFileName');\n\n      // Load chat history and active session\n      const savedChatHistory = localStorage.getItem('chatHistory');\n      const savedActiveSession = localStorage.getItem('activeSessionId');\n      if (savedChat) {\n        const parsedChat = JSON.parse(savedChat);\n        if (Array.isArray(parsedChat)) setCurrentChat(parsedChat);\n      }\n      if (savedPrediction) {\n        const parsedPrediction = JSON.parse(savedPrediction);\n        setPredictionData(parsedPrediction);\n      }\n      if (savedDashboard) {\n        const parsedDashboard = JSON.parse(savedDashboard);\n        setDashboardData(parsedDashboard);\n      }\n      if (savedBatchResults) {\n        const parsedBatchResults = JSON.parse(savedBatchResults);\n        if (Array.isArray(parsedBatchResults)) setBatchResults(parsedBatchResults);\n      }\n      if (savedBatchFileName) setBatchFileName(savedBatchFileName);\n      if (savedChatHistory) {\n        const parsedHistory = JSON.parse(savedChatHistory);\n        if (typeof parsedHistory === 'object') setChatHistory(parsedHistory);\n      }\n      if (savedActiveSession) setActiveSessionId(savedActiveSession);\n      console.log('✅ App context loaded from localStorage');\n    } catch (error) {\n      console.error('Error loading saved data:', error);\n      // Clear corrupted data\n      localStorage.removeItem('currentChat');\n      localStorage.removeItem('predictionData');\n      localStorage.removeItem('dashboardData');\n      localStorage.removeItem('batchResults');\n      localStorage.removeItem('batchFileName');\n      localStorage.removeItem('chatHistory');\n      localStorage.removeItem('activeSessionId');\n    }\n  }, []);\n\n  // ENHANCED: Auto-save with debouncing to prevent excessive writes\n  useEffect(() => {\n    const saveTimeout = setTimeout(() => {\n      if (currentChat.length > 0) {\n        localStorage.setItem('currentChat', JSON.stringify(currentChat));\n      }\n    }, 500); // Debounce saves by 500ms\n\n    return () => clearTimeout(saveTimeout);\n  }, [currentChat]);\n  useEffect(() => {\n    if (predictionData) {\n      localStorage.setItem('predictionData', JSON.stringify(predictionData));\n    }\n  }, [predictionData]);\n  useEffect(() => {\n    if (dashboardData) {\n      localStorage.setItem('dashboardData', JSON.stringify(dashboardData));\n    }\n  }, [dashboardData]);\n\n  // ENHANCED: Batch results with validation\n  useEffect(() => {\n    if (batchResults && Array.isArray(batchResults) && batchResults.length > 0) {\n      localStorage.setItem('batchResults', JSON.stringify(batchResults));\n    } else {\n      localStorage.removeItem('batchResults');\n    }\n  }, [batchResults]);\n  useEffect(() => {\n    if (batchFileName && batchFileName.trim()) {\n      localStorage.setItem('batchFileName', batchFileName);\n    } else {\n      localStorage.removeItem('batchFileName');\n    }\n  }, [batchFileName]);\n\n  // ENHANCED: Chat history with session management\n  useEffect(() => {\n    const saveTimeout = setTimeout(() => {\n      if (Object.keys(chatHistory).length > 0) {\n        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));\n      }\n    }, 500); // Debounce saves\n\n    return () => clearTimeout(saveTimeout);\n  }, [chatHistory]);\n  useEffect(() => {\n    if (activeSessionId) {\n      localStorage.setItem('activeSessionId', activeSessionId);\n    } else {\n      localStorage.removeItem('activeSessionId');\n    }\n  }, [activeSessionId]);\n\n  // ENHANCED: Chat management with better session handling\n  const addToChatHistory = (sessionId, message) => {\n    if (!sessionId || !message) return;\n    setChatHistory(prev => {\n      const sessionMessages = prev[sessionId] || [];\n\n      // Prevent duplicates based on message content and timestamp\n      const isDuplicate = sessionMessages.some(msg => msg.message === message.message && msg.source === message.source && Math.abs(new Date(msg.created_at) - new Date(message.created_at)) < 1000 // Within 1 second\n      );\n      if (isDuplicate) return prev;\n      return {\n        ...prev,\n        [sessionId]: [...sessionMessages, {\n          ...message,\n          id: message.id || Date.now() + Math.random(),\n          timestamp: message.created_at || new Date().toISOString()\n        }]\n      };\n    });\n  };\n  const getChatHistory = sessionId => {\n    if (!sessionId) return [];\n    return chatHistory[sessionId] || [];\n  };\n  const clearChatHistory = (sessionId = null) => {\n    if (sessionId) {\n      setChatHistory(prev => {\n        const newHistory = {\n          ...prev\n        };\n        delete newHistory[sessionId];\n        return newHistory;\n      });\n    } else {\n      // Clear all chat history\n      setChatHistory({});\n      localStorage.removeItem('chatHistory');\n      console.log('🗑️ All chat history cleared');\n    }\n  };\n\n  // ENHANCED: Batch results management with dashboard integration\n  const setBatchPredictionResults = (results, fileName = '') => {\n    if (!Array.isArray(results)) {\n      console.error('Batch results must be an array');\n      return;\n    }\n    setBatchResults(results);\n    setBatchFileName(fileName);\n    console.log(`📊 Batch results saved: ${results.length} patients from ${fileName}`);\n\n    // Trigger dashboard refresh by clearing cached data\n    // This ensures dashboard stats include batch results\n    setDashboardData(prev => prev ? {\n      ...prev,\n      _refreshNeeded: true\n    } : null);\n  };\n  const clearBatchResults = () => {\n    setBatchResults(null);\n    setBatchFileName('');\n\n    // Trigger dashboard refresh\n    setDashboardData(prev => prev ? {\n      ...prev,\n      _refreshNeeded: true\n    } : null);\n    console.log('🗑️ Batch results cleared');\n  };\n\n  // ENHANCED: Session management\n  const setActiveSession = sessionId => {\n    setActiveSessionId(sessionId);\n  };\n  const getActiveSession = () => {\n    return activeSessionId;\n  };\n\n  // Existing reset functions with enhancements\n  const resetChat = () => {\n    setCurrentChat([]);\n    localStorage.removeItem('currentChat');\n  };\n  const resetPrediction = () => {\n    setPredictionData(null);\n    localStorage.removeItem('predictionData');\n  };\n  const resetDashboard = () => {\n    setDashboardData(null);\n    localStorage.removeItem('dashboardData');\n  };\n\n  // ENHANCED: Complete logout with thorough cleanup\n  const logout = () => {\n    console.log('🚪 Logging out and clearing all app data...');\n\n    // Clear app-specific localStorage\n    resetChat();\n    resetPrediction();\n    resetDashboard();\n    clearBatchResults();\n    clearChatHistory();\n\n    // Clear session data\n    setActiveSessionId(null);\n    localStorage.removeItem('activeSessionId');\n\n    // Clear auth-related storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Clear any other app-specific keys\n    ['currentPrediction', 'selectedPatient', 'chatSettings'].forEach(key => {\n      localStorage.removeItem(key);\n    });\n\n    // Navigate with error handling\n    try {\n      navigate('/login');\n    } catch (error) {\n      console.error('Navigation error:', error);\n      // Fallback navigation\n      window.location.href = '/login';\n    }\n  };\n\n  // ENHANCED: Get dashboard statistics including batch data\n  const getDashboardStats = () => {\n    const stats = {\n      totalPredictions: 0,\n      totalPatients: 0,\n      batchAnalyses: 0,\n      chatSessions: Object.keys(chatHistory).length,\n      totalMessages: Object.values(chatHistory).reduce((total, messages) => total + messages.length, 0)\n    };\n\n    // Add batch results to stats\n    if (batchResults && Array.isArray(batchResults)) {\n      stats.batchAnalyses = 1;\n      stats.totalPatients += batchResults.length;\n      stats.totalPredictions += batchResults.length;\n    }\n    return stats;\n  };\n  const contextValue = {\n    // Existing functionality\n    currentChat,\n    setCurrentChat,\n    predictionData,\n    setPredictionData,\n    dashboardData,\n    setDashboardData,\n    resetChat,\n    resetPrediction,\n    resetDashboard,\n    logout,\n    // ENHANCED: Batch functionality with dashboard integration\n    batchResults,\n    batchFileName,\n    setBatchPredictionResults,\n    clearBatchResults,\n    // ENHANCED: Chat functionality with session management\n    chatHistory,\n    addToChatHistory,\n    getChatHistory,\n    clearChatHistory,\n    activeSessionId,\n    setActiveSession,\n    getActiveSession,\n    // NEW: Additional utilities\n    getDashboardStats\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 326,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"nHdtJB4DYJqRh0fhmAKqpLt0/QA=\", false, function () {\n  return [useNavigate];\n});\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","currentChat","setCurrentChat","predictionData","setPredictionData","dashboardData","setDashboardData","batchResults","setBatchResults","batchFileName","setBatchFileName","chatHistory","setChatHistory","activeSessionId","setActiveSessionId","navigate","savedChat","localStorage","getItem","savedPrediction","savedDashboard","savedBatchResults","savedBatchFileName","savedChatHistory","savedActiveSession","parsedChat","JSON","parse","Array","isArray","parsedPrediction","parsedDashboard","parsedBatchResults","parsedHistory","console","log","error","removeItem","saveTimeout","setTimeout","length","setItem","stringify","clearTimeout","trim","Object","keys","addToChatHistory","sessionId","message","prev","sessionMessages","isDuplicate","some","msg","source","Math","abs","Date","created_at","id","now","random","timestamp","toISOString","getChatHistory","clearChatHistory","newHistory","setBatchPredictionResults","results","fileName","_refreshNeeded","clearBatchResults","setActiveSession","getActiveSession","resetChat","resetPrediction","resetDashboard","logout","forEach","key","window","location","href","getDashboardStats","stats","totalPredictions","totalPatients","batchAnalyses","chatSessions","totalMessages","values","reduce","total","messages","contextValue","Provider","value","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [currentChat, setCurrentChat] = useState([]);\r\n  const [predictionData, setPredictionData] = useState(null);\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  \r\n  // ENHANCED: Batch results persistence with better integration  \r\n  const [batchResults, setBatchResults] = useState(null);\r\n  const [batchFileName, setBatchFileName] = useState('');\r\n  \r\n  // ENHANCED: Complete chat history management with session support\r\n  const [chatHistory, setChatHistory] = useState({}); // Store all conversations by session\r\n  const [activeSessionId, setActiveSessionId] = useState(null);\r\n  \r\n  const navigate = useNavigate();\r\n\r\n  // ENHANCED: Initialize from localStorage with better error handling\r\n  useEffect(() => {\r\n    try {\r\n      // Load basic app state\r\n      const savedChat = localStorage.getItem('currentChat');\r\n      const savedPrediction = localStorage.getItem('predictionData');\r\n      const savedDashboard = localStorage.getItem('dashboardData');\r\n      \r\n      // Load batch results\r\n      const savedBatchResults = localStorage.getItem('batchResults');\r\n      const savedBatchFileName = localStorage.getItem('batchFileName');\r\n      \r\n      // Load chat history and active session\r\n      const savedChatHistory = localStorage.getItem('chatHistory');\r\n      const savedActiveSession = localStorage.getItem('activeSessionId');\r\n\r\n      if (savedChat) {\r\n        const parsedChat = JSON.parse(savedChat);\r\n        if (Array.isArray(parsedChat)) setCurrentChat(parsedChat);\r\n      }\r\n      \r\n      if (savedPrediction) {\r\n        const parsedPrediction = JSON.parse(savedPrediction);\r\n        setPredictionData(parsedPrediction);\r\n      }\r\n      \r\n      if (savedDashboard) {\r\n        const parsedDashboard = JSON.parse(savedDashboard);  \r\n        setDashboardData(parsedDashboard);\r\n      }\r\n      \r\n      if (savedBatchResults) {\r\n        const parsedBatchResults = JSON.parse(savedBatchResults);\r\n        if (Array.isArray(parsedBatchResults)) setBatchResults(parsedBatchResults);\r\n      }\r\n      \r\n      if (savedBatchFileName) setBatchFileName(savedBatchFileName);\r\n      \r\n      if (savedChatHistory) {\r\n        const parsedHistory = JSON.parse(savedChatHistory);\r\n        if (typeof parsedHistory === 'object') setChatHistory(parsedHistory);\r\n      }\r\n      \r\n      if (savedActiveSession) setActiveSessionId(savedActiveSession);\r\n\r\n      console.log('✅ App context loaded from localStorage');\r\n    } catch (error) {\r\n      console.error('Error loading saved data:', error);\r\n      // Clear corrupted data\r\n      localStorage.removeItem('currentChat');\r\n      localStorage.removeItem('predictionData');\r\n      localStorage.removeItem('dashboardData');\r\n      localStorage.removeItem('batchResults');\r\n      localStorage.removeItem('batchFileName');\r\n      localStorage.removeItem('chatHistory');\r\n      localStorage.removeItem('activeSessionId');\r\n    }\r\n  }, []);\r\n\r\n  // ENHANCED: Auto-save with debouncing to prevent excessive writes\r\n  useEffect(() => {\r\n    const saveTimeout = setTimeout(() => {\r\n      if (currentChat.length > 0) {\r\n        localStorage.setItem('currentChat', JSON.stringify(currentChat));\r\n      }\r\n    }, 500); // Debounce saves by 500ms\r\n    \r\n    return () => clearTimeout(saveTimeout);\r\n  }, [currentChat]);\r\n\r\n  useEffect(() => {\r\n    if (predictionData) {\r\n      localStorage.setItem('predictionData', JSON.stringify(predictionData));\r\n    }\r\n  }, [predictionData]);\r\n\r\n  useEffect(() => {\r\n    if (dashboardData) {\r\n      localStorage.setItem('dashboardData', JSON.stringify(dashboardData));\r\n    }\r\n  }, [dashboardData]);\r\n\r\n  // ENHANCED: Batch results with validation\r\n  useEffect(() => {\r\n    if (batchResults && Array.isArray(batchResults) && batchResults.length > 0) {\r\n      localStorage.setItem('batchResults', JSON.stringify(batchResults));\r\n    } else {\r\n      localStorage.removeItem('batchResults');\r\n    }\r\n  }, [batchResults]);\r\n\r\n  useEffect(() => {\r\n    if (batchFileName && batchFileName.trim()) {\r\n      localStorage.setItem('batchFileName', batchFileName);\r\n    } else {\r\n      localStorage.removeItem('batchFileName');\r\n    }\r\n  }, [batchFileName]);\r\n\r\n  // ENHANCED: Chat history with session management\r\n  useEffect(() => {\r\n    const saveTimeout = setTimeout(() => {\r\n      if (Object.keys(chatHistory).length > 0) {\r\n        localStorage.setItem('chatHistory', JSON.stringify(chatHistory));\r\n      }\r\n    }, 500); // Debounce saves\r\n    \r\n    return () => clearTimeout(saveTimeout);\r\n  }, [chatHistory]);\r\n\r\n  useEffect(() => {\r\n    if (activeSessionId) {\r\n      localStorage.setItem('activeSessionId', activeSessionId);\r\n    } else {\r\n      localStorage.removeItem('activeSessionId');\r\n    }\r\n  }, [activeSessionId]);\r\n\r\n  // ENHANCED: Chat management with better session handling\r\n  const addToChatHistory = (sessionId, message) => {\r\n    if (!sessionId || !message) return;\r\n    \r\n    setChatHistory(prev => {\r\n      const sessionMessages = prev[sessionId] || [];\r\n      \r\n      // Prevent duplicates based on message content and timestamp\r\n      const isDuplicate = sessionMessages.some(msg => \r\n        msg.message === message.message && \r\n        msg.source === message.source &&\r\n        Math.abs(new Date(msg.created_at) - new Date(message.created_at)) < 1000 // Within 1 second\r\n      );\r\n      \r\n      if (isDuplicate) return prev;\r\n      \r\n      return {\r\n        ...prev,\r\n        [sessionId]: [...sessionMessages, {\r\n          ...message,\r\n          id: message.id || Date.now() + Math.random(),\r\n          timestamp: message.created_at || new Date().toISOString()\r\n        }]\r\n      };\r\n    });\r\n  };\r\n\r\n  const getChatHistory = (sessionId) => {\r\n    if (!sessionId) return [];\r\n    return chatHistory[sessionId] || [];\r\n  };\r\n\r\n  const clearChatHistory = (sessionId = null) => {\r\n    if (sessionId) {\r\n      setChatHistory(prev => {\r\n        const newHistory = { ...prev };\r\n        delete newHistory[sessionId];\r\n        return newHistory;\r\n      });\r\n    } else {\r\n      // Clear all chat history\r\n      setChatHistory({});\r\n      localStorage.removeItem('chatHistory');\r\n      console.log('🗑️ All chat history cleared');\r\n    }\r\n  };\r\n\r\n  // ENHANCED: Batch results management with dashboard integration\r\n  const setBatchPredictionResults = (results, fileName = '') => {\r\n    if (!Array.isArray(results)) {\r\n      console.error('Batch results must be an array');\r\n      return;\r\n    }\r\n    \r\n    setBatchResults(results);\r\n    setBatchFileName(fileName);\r\n    \r\n    console.log(`📊 Batch results saved: ${results.length} patients from ${fileName}`);\r\n    \r\n    // Trigger dashboard refresh by clearing cached data\r\n    // This ensures dashboard stats include batch results\r\n    setDashboardData(prev => prev ? { ...prev, _refreshNeeded: true } : null);\r\n  };\r\n\r\n  const clearBatchResults = () => {\r\n    setBatchResults(null);\r\n    setBatchFileName('');\r\n    \r\n    // Trigger dashboard refresh\r\n    setDashboardData(prev => prev ? { ...prev, _refreshNeeded: true } : null);\r\n    \r\n    console.log('🗑️ Batch results cleared');\r\n  };\r\n\r\n  // ENHANCED: Session management\r\n  const setActiveSession = (sessionId) => {\r\n    setActiveSessionId(sessionId);\r\n  };\r\n\r\n  const getActiveSession = () => {\r\n    return activeSessionId;\r\n  };\r\n\r\n  // Existing reset functions with enhancements\r\n  const resetChat = () => {\r\n    setCurrentChat([]);\r\n    localStorage.removeItem('currentChat');\r\n  };\r\n\r\n  const resetPrediction = () => {\r\n    setPredictionData(null);\r\n    localStorage.removeItem('predictionData');\r\n  };\r\n\r\n  const resetDashboard = () => {\r\n    setDashboardData(null);\r\n    localStorage.removeItem('dashboardData');\r\n  };\r\n\r\n  // ENHANCED: Complete logout with thorough cleanup\r\n  const logout = () => {\r\n    console.log('🚪 Logging out and clearing all app data...');\r\n    \r\n    // Clear app-specific localStorage\r\n    resetChat();\r\n    resetPrediction();\r\n    resetDashboard();\r\n    clearBatchResults();\r\n    clearChatHistory();\r\n    \r\n    // Clear session data\r\n    setActiveSessionId(null);\r\n    localStorage.removeItem('activeSessionId');\r\n    \r\n    // Clear auth-related storage\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    \r\n    // Clear any other app-specific keys\r\n    ['currentPrediction', 'selectedPatient', 'chatSettings'].forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n    \r\n    // Navigate with error handling\r\n    try {\r\n      navigate('/login');\r\n    } catch (error) {\r\n      console.error('Navigation error:', error);\r\n      // Fallback navigation\r\n      window.location.href = '/login';\r\n    }\r\n  };\r\n\r\n  // ENHANCED: Get dashboard statistics including batch data\r\n  const getDashboardStats = () => {\r\n    const stats = {\r\n      totalPredictions: 0,\r\n      totalPatients: 0,\r\n      batchAnalyses: 0,\r\n      chatSessions: Object.keys(chatHistory).length,\r\n      totalMessages: Object.values(chatHistory).reduce((total, messages) => total + messages.length, 0)\r\n    };\r\n\r\n    // Add batch results to stats\r\n    if (batchResults && Array.isArray(batchResults)) {\r\n      stats.batchAnalyses = 1;\r\n      stats.totalPatients += batchResults.length;\r\n      stats.totalPredictions += batchResults.length;\r\n    }\r\n\r\n    return stats;\r\n  };\r\n\r\n  const contextValue = {\r\n    // Existing functionality\r\n    currentChat,\r\n    setCurrentChat,\r\n    predictionData,\r\n    setPredictionData,\r\n    dashboardData,\r\n    setDashboardData,\r\n    resetChat,\r\n    resetPrediction,\r\n    resetDashboard,\r\n    logout,\r\n    \r\n    // ENHANCED: Batch functionality with dashboard integration\r\n    batchResults,\r\n    batchFileName,\r\n    setBatchPredictionResults,\r\n    clearBatchResults,\r\n    \r\n    // ENHANCED: Chat functionality with session management\r\n    chatHistory,\r\n    addToChatHistory,\r\n    getChatHistory,\r\n    clearChatHistory,\r\n    activeSessionId,\r\n    setActiveSession,\r\n    getActiveSession,\r\n    \r\n    // NEW: Additional utilities\r\n    getDashboardStats\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={contextValue}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAppContext = () => {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAppContext must be used within an AppProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}