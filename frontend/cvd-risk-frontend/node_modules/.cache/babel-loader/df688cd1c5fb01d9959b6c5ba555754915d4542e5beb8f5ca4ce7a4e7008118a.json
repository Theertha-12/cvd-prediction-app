{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\cvd-risk-project\\\\frontend\\\\cvd-risk-frontend\\\\src\\\\context\\\\AppContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [currentChat, setCurrentChat] = useState([]);\n  const [predictionData, setPredictionData] = useState(null);\n  const [dashboardData, setDashboardData] = useState(null);\n\n  // ENHANCED: Batch results persistence with better integration  \n  const [batchResults, setBatchResults] = useState(null);\n  const [batchFileName, setBatchFileName] = useState('');\n\n  // ENHANCED: Complete chat history management with session support\n  const [chatHistory, setChatHistory] = useState({}); // Store all conversations by session\n  const [activeSessionId, setActiveSessionId] = useState(null);\n  const navigate = useNavigate();\n\n  // CRITICAL FIX: Get user-specific localStorage keys\n  const getUserSpecificKey = key => {\n    const userId = localStorage.getItem('current_user_id');\n    return userId ? `${key}_user_${userId}` : key;\n  };\n\n  // CRITICAL FIX: Clear all data for current user\n  const clearUserSpecificData = () => {\n    const userId = localStorage.getItem('current_user_id');\n    if (!userId) return;\n\n    // Remove user-specific keys\n    const keysToRemove = [`currentChat_user_${userId}`, `predictionData_user_${userId}`, `dashboardData_user_${userId}`, `batchResults_user_${userId}`, `batchFileName_user_${userId}`, `chatHistory_user_${userId}`, `activeSessionId_user_${userId}`];\n    keysToRemove.forEach(key => {\n      localStorage.removeItem(key);\n    });\n    console.log(`🗑️ Cleared user-specific data for user ${userId}`);\n  };\n\n  // CRITICAL FIX: Clear ALL user data (for switching users)\n  const clearAllUserData = () => {\n    console.log('🗑️ Clearing ALL user data...');\n\n    // Clear current state\n    setCurrentChat([]);\n    setPredictionData(null);\n    setDashboardData(null);\n    setBatchResults(null);\n    setBatchFileName('');\n    setChatHistory({});\n    setActiveSessionId(null);\n\n    // Remove all possible user-specific keys\n    const allKeys = Object.keys(localStorage);\n    const userDataKeys = allKeys.filter(key => key.includes('currentChat_') || key.includes('predictionData_') || key.includes('dashboardData_') || key.includes('batchResults_') || key.includes('batchFileName_') || key.includes('chatHistory_') || key.includes('activeSessionId_'));\n    userDataKeys.forEach(key => {\n      localStorage.removeItem(key);\n    });\n\n    // Also remove non-user-specific keys (fallback)\n    ['currentChat', 'predictionData', 'dashboardData', 'batchResults', 'batchFileName', 'chatHistory', 'activeSessionId'].forEach(key => {\n      localStorage.removeItem(key);\n    });\n    console.log('✅ All user data cleared');\n  };\n\n  // ENHANCED: Initialize from localStorage with user-specific keys\n  useEffect(() => {\n    try {\n      const userId = localStorage.getItem('current_user_id');\n      if (!userId) {\n        console.log('ℹ️ No user ID found, skipping data load');\n        return;\n      }\n      console.log(`📂 Loading data for user ${userId}...`);\n\n      // Load user-specific data\n      const savedChat = localStorage.getItem(getUserSpecificKey('currentChat'));\n      const savedPrediction = localStorage.getItem(getUserSpecificKey('predictionData'));\n      const savedDashboard = localStorage.getItem(getUserSpecificKey('dashboardData'));\n      const savedBatchResults = localStorage.getItem(getUserSpecificKey('batchResults'));\n      const savedBatchFileName = localStorage.getItem(getUserSpecificKey('batchFileName'));\n      const savedChatHistory = localStorage.getItem(getUserSpecificKey('chatHistory'));\n      const savedActiveSession = localStorage.getItem(getUserSpecificKey('activeSessionId'));\n      if (savedChat) {\n        const parsedChat = JSON.parse(savedChat);\n        if (Array.isArray(parsedChat)) setCurrentChat(parsedChat);\n      }\n      if (savedPrediction) {\n        const parsedPrediction = JSON.parse(savedPrediction);\n        setPredictionData(parsedPrediction);\n      }\n      if (savedDashboard) {\n        const parsedDashboard = JSON.parse(savedDashboard);\n        setDashboardData(parsedDashboard);\n      }\n      if (savedBatchResults) {\n        const parsedBatchResults = JSON.parse(savedBatchResults);\n        if (Array.isArray(parsedBatchResults)) setBatchResults(parsedBatchResults);\n      }\n      if (savedBatchFileName) setBatchFileName(savedBatchFileName);\n      if (savedChatHistory) {\n        const parsedHistory = JSON.parse(savedChatHistory);\n        if (typeof parsedHistory === 'object') setChatHistory(parsedHistory);\n      }\n      if (savedActiveSession) setActiveSessionId(savedActiveSession);\n      console.log(`✅ User-specific data loaded for user ${userId}`);\n    } catch (error) {\n      console.error('Error loading saved data:', error);\n      // Clear corrupted data\n      clearAllUserData();\n    }\n  }, []); // Only run once on mount\n\n  // ENHANCED: Auto-save with user-specific keys and debouncing\n  useEffect(() => {\n    const saveTimeout = setTimeout(() => {\n      if (currentChat.length > 0) {\n        localStorage.setItem(getUserSpecificKey('currentChat'), JSON.stringify(currentChat));\n      }\n    }, 500);\n    return () => clearTimeout(saveTimeout);\n  }, [currentChat]);\n  useEffect(() => {\n    if (predictionData) {\n      localStorage.setItem(getUserSpecificKey('predictionData'), JSON.stringify(predictionData));\n    }\n  }, [predictionData]);\n  useEffect(() => {\n    if (dashboardData) {\n      localStorage.setItem(getUserSpecificKey('dashboardData'), JSON.stringify(dashboardData));\n    }\n  }, [dashboardData]);\n  useEffect(() => {\n    if (batchResults && Array.isArray(batchResults) && batchResults.length > 0) {\n      localStorage.setItem(getUserSpecificKey('batchResults'), JSON.stringify(batchResults));\n    } else {\n      localStorage.removeItem(getUserSpecificKey('batchResults'));\n    }\n  }, [batchResults]);\n  useEffect(() => {\n    if (batchFileName && batchFileName.trim()) {\n      localStorage.setItem(getUserSpecificKey('batchFileName'), batchFileName);\n    } else {\n      localStorage.removeItem(getUserSpecificKey('batchFileName'));\n    }\n  }, [batchFileName]);\n  useEffect(() => {\n    const saveTimeout = setTimeout(() => {\n      if (Object.keys(chatHistory).length > 0) {\n        localStorage.setItem(getUserSpecificKey('chatHistory'), JSON.stringify(chatHistory));\n      }\n    }, 500);\n    return () => clearTimeout(saveTimeout);\n  }, [chatHistory]);\n  useEffect(() => {\n    if (activeSessionId) {\n      localStorage.setItem(getUserSpecificKey('activeSessionId'), activeSessionId);\n    } else {\n      localStorage.removeItem(getUserSpecificKey('activeSessionId'));\n    }\n  }, [activeSessionId]);\n\n  // ENHANCED: Chat management with better session handling\n  const addToChatHistory = (sessionId, message) => {\n    if (!sessionId || !message) return;\n    setChatHistory(prev => {\n      const sessionMessages = prev[sessionId] || [];\n\n      // Prevent duplicates based on message content and timestamp\n      const isDuplicate = sessionMessages.some(msg => msg.message === message.message && msg.source === message.source && Math.abs(new Date(msg.created_at) - new Date(message.created_at)) < 1000 // Within 1 second\n      );\n      if (isDuplicate) return prev;\n      return {\n        ...prev,\n        [sessionId]: [...sessionMessages, {\n          ...message,\n          id: message.id || Date.now() + Math.random(),\n          timestamp: message.created_at || new Date().toISOString()\n        }]\n      };\n    });\n  };\n  const getChatHistory = sessionId => {\n    if (!sessionId) return [];\n    return chatHistory[sessionId] || [];\n  };\n  const clearChatHistory = (sessionId = null) => {\n    if (sessionId) {\n      setChatHistory(prev => {\n        const newHistory = {\n          ...prev\n        };\n        delete newHistory[sessionId];\n        return newHistory;\n      });\n    } else {\n      // Clear all chat history\n      setChatHistory({});\n      localStorage.removeItem(getUserSpecificKey('chatHistory'));\n      console.log('🗑️ All chat history cleared');\n    }\n  };\n\n  // ENHANCED: Batch results management with dashboard integration\n  const setBatchPredictionResults = (results, fileName = '') => {\n    if (!Array.isArray(results)) {\n      console.error('Batch results must be an array');\n      return;\n    }\n    setBatchResults(results);\n    setBatchFileName(fileName);\n    console.log(`📊 Batch results saved: ${results.length} patients from ${fileName}`);\n\n    // Trigger dashboard refresh by clearing cached data\n    setDashboardData(prev => prev ? {\n      ...prev,\n      _refreshNeeded: true\n    } : null);\n  };\n  const clearBatchResults = () => {\n    setBatchResults(null);\n    setBatchFileName('');\n\n    // Remove from localStorage\n    localStorage.removeItem(getUserSpecificKey('batchResults'));\n    localStorage.removeItem(getUserSpecificKey('batchFileName'));\n\n    // Trigger dashboard refresh\n    setDashboardData(prev => prev ? {\n      ...prev,\n      _refreshNeeded: true\n    } : null);\n    console.log('🗑️ Batch results cleared');\n  };\n\n  // Session management\n  const setActiveSession = sessionId => {\n    setActiveSessionId(sessionId);\n  };\n  const getActiveSession = () => {\n    return activeSessionId;\n  };\n\n  // CRITICAL FIX: Reset functions now use user-specific keys\n  const resetChat = () => {\n    setCurrentChat([]);\n    localStorage.removeItem(getUserSpecificKey('currentChat'));\n  };\n  const resetPrediction = () => {\n    setPredictionData(null);\n    localStorage.removeItem(getUserSpecificKey('predictionData'));\n  };\n  const resetDashboard = () => {\n    setDashboardData(null);\n    localStorage.removeItem(getUserSpecificKey('dashboardData'));\n  };\n\n  // ENHANCED: Complete logout with thorough cleanup\n  const logout = () => {\n    console.log('🚪 Logging out and clearing all app data...');\n\n    // Clear user-specific data\n    clearUserSpecificData();\n\n    // Clear app state\n    setCurrentChat([]);\n    setPredictionData(null);\n    setDashboardData(null);\n    setBatchResults(null);\n    setBatchFileName('');\n    setChatHistory({});\n    setActiveSessionId(null);\n\n    // Clear auth-related storage\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    localStorage.removeItem('current_user_id');\n\n    // Clear any other app-specific keys\n    ['currentPrediction', 'selectedPatient', 'chatSettings'].forEach(key => {\n      localStorage.removeItem(key);\n    });\n\n    // Navigate with error handling\n    try {\n      navigate('/login');\n    } catch (error) {\n      console.error('Navigation error:', error);\n      window.location.href = '/login';\n    }\n  };\n\n  // ENHANCED: Get dashboard statistics including batch data\n  const getDashboardStats = () => {\n    const stats = {\n      totalPredictions: 0,\n      totalPatients: 0,\n      batchAnalyses: 0,\n      chatSessions: Object.keys(chatHistory).length,\n      totalMessages: Object.values(chatHistory).reduce((total, messages) => total + messages.length, 0)\n    };\n\n    // Add batch results to stats\n    if (batchResults && Array.isArray(batchResults)) {\n      stats.batchAnalyses = 1;\n      stats.totalPatients += batchResults.length;\n      stats.totalPredictions += batchResults.length;\n    }\n    return stats;\n  };\n  const contextValue = {\n    // Existing functionality\n    currentChat,\n    setCurrentChat,\n    predictionData,\n    setPredictionData,\n    dashboardData,\n    setDashboardData,\n    resetChat,\n    resetPrediction,\n    resetDashboard,\n    logout,\n    // ENHANCED: Batch functionality with dashboard integration\n    batchResults,\n    batchFileName,\n    setBatchPredictionResults,\n    clearBatchResults,\n    // ENHANCED: Chat functionality with session management\n    chatHistory,\n    addToChatHistory,\n    getChatHistory,\n    clearChatHistory,\n    activeSessionId,\n    setActiveSession,\n    getActiveSession,\n    // CRITICAL FIX: New functions for user data management\n    clearAllUserData,\n    clearUserSpecificData,\n    // Additional utilities\n    getDashboardStats\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n};\n_s(AppProvider, \"nHdtJB4DYJqRh0fhmAKqpLt0/QA=\", false, function () {\n  return [useNavigate];\n});\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (context === undefined) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","currentChat","setCurrentChat","predictionData","setPredictionData","dashboardData","setDashboardData","batchResults","setBatchResults","batchFileName","setBatchFileName","chatHistory","setChatHistory","activeSessionId","setActiveSessionId","navigate","getUserSpecificKey","key","userId","localStorage","getItem","clearUserSpecificData","keysToRemove","forEach","removeItem","console","log","clearAllUserData","allKeys","Object","keys","userDataKeys","filter","includes","savedChat","savedPrediction","savedDashboard","savedBatchResults","savedBatchFileName","savedChatHistory","savedActiveSession","parsedChat","JSON","parse","Array","isArray","parsedPrediction","parsedDashboard","parsedBatchResults","parsedHistory","error","saveTimeout","setTimeout","length","setItem","stringify","clearTimeout","trim","addToChatHistory","sessionId","message","prev","sessionMessages","isDuplicate","some","msg","source","Math","abs","Date","created_at","id","now","random","timestamp","toISOString","getChatHistory","clearChatHistory","newHistory","setBatchPredictionResults","results","fileName","_refreshNeeded","clearBatchResults","setActiveSession","getActiveSession","resetChat","resetPrediction","resetDashboard","logout","window","location","href","getDashboardStats","stats","totalPredictions","totalPatients","batchAnalyses","chatSessions","totalMessages","values","reduce","total","messages","contextValue","Provider","value","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/context/AppContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  const [currentChat, setCurrentChat] = useState([]);\r\n  const [predictionData, setPredictionData] = useState(null);\r\n  const [dashboardData, setDashboardData] = useState(null);\r\n  \r\n  // ENHANCED: Batch results persistence with better integration  \r\n  const [batchResults, setBatchResults] = useState(null);\r\n  const [batchFileName, setBatchFileName] = useState('');\r\n  \r\n  // ENHANCED: Complete chat history management with session support\r\n  const [chatHistory, setChatHistory] = useState({}); // Store all conversations by session\r\n  const [activeSessionId, setActiveSessionId] = useState(null);\r\n  \r\n  const navigate = useNavigate();\r\n\r\n  // CRITICAL FIX: Get user-specific localStorage keys\r\n  const getUserSpecificKey = (key) => {\r\n    const userId = localStorage.getItem('current_user_id');\r\n    return userId ? `${key}_user_${userId}` : key;\r\n  };\r\n\r\n  // CRITICAL FIX: Clear all data for current user\r\n  const clearUserSpecificData = () => {\r\n    const userId = localStorage.getItem('current_user_id');\r\n    if (!userId) return;\r\n\r\n    // Remove user-specific keys\r\n    const keysToRemove = [\r\n      `currentChat_user_${userId}`,\r\n      `predictionData_user_${userId}`,\r\n      `dashboardData_user_${userId}`,\r\n      `batchResults_user_${userId}`,\r\n      `batchFileName_user_${userId}`,\r\n      `chatHistory_user_${userId}`,\r\n      `activeSessionId_user_${userId}`\r\n    ];\r\n\r\n    keysToRemove.forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n\r\n    console.log(`🗑️ Cleared user-specific data for user ${userId}`);\r\n  };\r\n\r\n  // CRITICAL FIX: Clear ALL user data (for switching users)\r\n  const clearAllUserData = () => {\r\n    console.log('🗑️ Clearing ALL user data...');\r\n    \r\n    // Clear current state\r\n    setCurrentChat([]);\r\n    setPredictionData(null);\r\n    setDashboardData(null);\r\n    setBatchResults(null);\r\n    setBatchFileName('');\r\n    setChatHistory({});\r\n    setActiveSessionId(null);\r\n\r\n    // Remove all possible user-specific keys\r\n    const allKeys = Object.keys(localStorage);\r\n    const userDataKeys = allKeys.filter(key => \r\n      key.includes('currentChat_') || \r\n      key.includes('predictionData_') || \r\n      key.includes('dashboardData_') || \r\n      key.includes('batchResults_') || \r\n      key.includes('batchFileName_') || \r\n      key.includes('chatHistory_') || \r\n      key.includes('activeSessionId_')\r\n    );\r\n\r\n    userDataKeys.forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n\r\n    // Also remove non-user-specific keys (fallback)\r\n    [\r\n      'currentChat',\r\n      'predictionData', \r\n      'dashboardData',\r\n      'batchResults',\r\n      'batchFileName',\r\n      'chatHistory',\r\n      'activeSessionId'\r\n    ].forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n\r\n    console.log('✅ All user data cleared');\r\n  };\r\n\r\n  // ENHANCED: Initialize from localStorage with user-specific keys\r\n  useEffect(() => {\r\n    try {\r\n      const userId = localStorage.getItem('current_user_id');\r\n      if (!userId) {\r\n        console.log('ℹ️ No user ID found, skipping data load');\r\n        return;\r\n      }\r\n\r\n      console.log(`📂 Loading data for user ${userId}...`);\r\n\r\n      // Load user-specific data\r\n      const savedChat = localStorage.getItem(getUserSpecificKey('currentChat'));\r\n      const savedPrediction = localStorage.getItem(getUserSpecificKey('predictionData'));\r\n      const savedDashboard = localStorage.getItem(getUserSpecificKey('dashboardData'));\r\n      const savedBatchResults = localStorage.getItem(getUserSpecificKey('batchResults'));\r\n      const savedBatchFileName = localStorage.getItem(getUserSpecificKey('batchFileName'));\r\n      const savedChatHistory = localStorage.getItem(getUserSpecificKey('chatHistory'));\r\n      const savedActiveSession = localStorage.getItem(getUserSpecificKey('activeSessionId'));\r\n\r\n      if (savedChat) {\r\n        const parsedChat = JSON.parse(savedChat);\r\n        if (Array.isArray(parsedChat)) setCurrentChat(parsedChat);\r\n      }\r\n      \r\n      if (savedPrediction) {\r\n        const parsedPrediction = JSON.parse(savedPrediction);\r\n        setPredictionData(parsedPrediction);\r\n      }\r\n      \r\n      if (savedDashboard) {\r\n        const parsedDashboard = JSON.parse(savedDashboard);  \r\n        setDashboardData(parsedDashboard);\r\n      }\r\n      \r\n      if (savedBatchResults) {\r\n        const parsedBatchResults = JSON.parse(savedBatchResults);\r\n        if (Array.isArray(parsedBatchResults)) setBatchResults(parsedBatchResults);\r\n      }\r\n      \r\n      if (savedBatchFileName) setBatchFileName(savedBatchFileName);\r\n      \r\n      if (savedChatHistory) {\r\n        const parsedHistory = JSON.parse(savedChatHistory);\r\n        if (typeof parsedHistory === 'object') setChatHistory(parsedHistory);\r\n      }\r\n      \r\n      if (savedActiveSession) setActiveSessionId(savedActiveSession);\r\n\r\n      console.log(`✅ User-specific data loaded for user ${userId}`);\r\n    } catch (error) {\r\n      console.error('Error loading saved data:', error);\r\n      // Clear corrupted data\r\n      clearAllUserData();\r\n    }\r\n  }, []); // Only run once on mount\r\n\r\n  // ENHANCED: Auto-save with user-specific keys and debouncing\r\n  useEffect(() => {\r\n    const saveTimeout = setTimeout(() => {\r\n      if (currentChat.length > 0) {\r\n        localStorage.setItem(getUserSpecificKey('currentChat'), JSON.stringify(currentChat));\r\n      }\r\n    }, 500);\r\n    \r\n    return () => clearTimeout(saveTimeout);\r\n  }, [currentChat]);\r\n\r\n  useEffect(() => {\r\n    if (predictionData) {\r\n      localStorage.setItem(getUserSpecificKey('predictionData'), JSON.stringify(predictionData));\r\n    }\r\n  }, [predictionData]);\r\n\r\n  useEffect(() => {\r\n    if (dashboardData) {\r\n      localStorage.setItem(getUserSpecificKey('dashboardData'), JSON.stringify(dashboardData));\r\n    }\r\n  }, [dashboardData]);\r\n\r\n  useEffect(() => {\r\n    if (batchResults && Array.isArray(batchResults) && batchResults.length > 0) {\r\n      localStorage.setItem(getUserSpecificKey('batchResults'), JSON.stringify(batchResults));\r\n    } else {\r\n      localStorage.removeItem(getUserSpecificKey('batchResults'));\r\n    }\r\n  }, [batchResults]);\r\n\r\n  useEffect(() => {\r\n    if (batchFileName && batchFileName.trim()) {\r\n      localStorage.setItem(getUserSpecificKey('batchFileName'), batchFileName);\r\n    } else {\r\n      localStorage.removeItem(getUserSpecificKey('batchFileName'));\r\n    }\r\n  }, [batchFileName]);\r\n\r\n  useEffect(() => {\r\n    const saveTimeout = setTimeout(() => {\r\n      if (Object.keys(chatHistory).length > 0) {\r\n        localStorage.setItem(getUserSpecificKey('chatHistory'), JSON.stringify(chatHistory));\r\n      }\r\n    }, 500);\r\n    \r\n    return () => clearTimeout(saveTimeout);\r\n  }, [chatHistory]);\r\n\r\n  useEffect(() => {\r\n    if (activeSessionId) {\r\n      localStorage.setItem(getUserSpecificKey('activeSessionId'), activeSessionId);\r\n    } else {\r\n      localStorage.removeItem(getUserSpecificKey('activeSessionId'));\r\n    }\r\n  }, [activeSessionId]);\r\n\r\n  // ENHANCED: Chat management with better session handling\r\n  const addToChatHistory = (sessionId, message) => {\r\n    if (!sessionId || !message) return;\r\n    \r\n    setChatHistory(prev => {\r\n      const sessionMessages = prev[sessionId] || [];\r\n      \r\n      // Prevent duplicates based on message content and timestamp\r\n      const isDuplicate = sessionMessages.some(msg => \r\n        msg.message === message.message && \r\n        msg.source === message.source &&\r\n        Math.abs(new Date(msg.created_at) - new Date(message.created_at)) < 1000 // Within 1 second\r\n      );\r\n      \r\n      if (isDuplicate) return prev;\r\n      \r\n      return {\r\n        ...prev,\r\n        [sessionId]: [...sessionMessages, {\r\n          ...message,\r\n          id: message.id || Date.now() + Math.random(),\r\n          timestamp: message.created_at || new Date().toISOString()\r\n        }]\r\n      };\r\n    });\r\n  };\r\n\r\n  const getChatHistory = (sessionId) => {\r\n    if (!sessionId) return [];\r\n    return chatHistory[sessionId] || [];\r\n  };\r\n\r\n  const clearChatHistory = (sessionId = null) => {\r\n    if (sessionId) {\r\n      setChatHistory(prev => {\r\n        const newHistory = { ...prev };\r\n        delete newHistory[sessionId];\r\n        return newHistory;\r\n      });\r\n    } else {\r\n      // Clear all chat history\r\n      setChatHistory({});\r\n      localStorage.removeItem(getUserSpecificKey('chatHistory'));\r\n      console.log('🗑️ All chat history cleared');\r\n    }\r\n  };\r\n\r\n  // ENHANCED: Batch results management with dashboard integration\r\n  const setBatchPredictionResults = (results, fileName = '') => {\r\n    if (!Array.isArray(results)) {\r\n      console.error('Batch results must be an array');\r\n      return;\r\n    }\r\n    \r\n    setBatchResults(results);\r\n    setBatchFileName(fileName);\r\n    \r\n    console.log(`📊 Batch results saved: ${results.length} patients from ${fileName}`);\r\n    \r\n    // Trigger dashboard refresh by clearing cached data\r\n    setDashboardData(prev => prev ? { ...prev, _refreshNeeded: true } : null);\r\n  };\r\n\r\n  const clearBatchResults = () => {\r\n    setBatchResults(null);\r\n    setBatchFileName('');\r\n    \r\n    // Remove from localStorage\r\n    localStorage.removeItem(getUserSpecificKey('batchResults'));\r\n    localStorage.removeItem(getUserSpecificKey('batchFileName'));\r\n    \r\n    // Trigger dashboard refresh\r\n    setDashboardData(prev => prev ? { ...prev, _refreshNeeded: true } : null);\r\n    \r\n    console.log('🗑️ Batch results cleared');\r\n  };\r\n\r\n  // Session management\r\n  const setActiveSession = (sessionId) => {\r\n    setActiveSessionId(sessionId);\r\n  };\r\n\r\n  const getActiveSession = () => {\r\n    return activeSessionId;\r\n  };\r\n\r\n  // CRITICAL FIX: Reset functions now use user-specific keys\r\n  const resetChat = () => {\r\n    setCurrentChat([]);\r\n    localStorage.removeItem(getUserSpecificKey('currentChat'));\r\n  };\r\n\r\n  const resetPrediction = () => {\r\n    setPredictionData(null);\r\n    localStorage.removeItem(getUserSpecificKey('predictionData'));\r\n  };\r\n\r\n  const resetDashboard = () => {\r\n    setDashboardData(null);\r\n    localStorage.removeItem(getUserSpecificKey('dashboardData'));\r\n  };\r\n\r\n  // ENHANCED: Complete logout with thorough cleanup\r\n  const logout = () => {\r\n    console.log('🚪 Logging out and clearing all app data...');\r\n    \r\n    // Clear user-specific data\r\n    clearUserSpecificData();\r\n    \r\n    // Clear app state\r\n    setCurrentChat([]);\r\n    setPredictionData(null);\r\n    setDashboardData(null);\r\n    setBatchResults(null);\r\n    setBatchFileName('');\r\n    setChatHistory({});\r\n    setActiveSessionId(null);\r\n    \r\n    // Clear auth-related storage\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('current_user_id');\r\n    \r\n    // Clear any other app-specific keys\r\n    ['currentPrediction', 'selectedPatient', 'chatSettings'].forEach(key => {\r\n      localStorage.removeItem(key);\r\n    });\r\n    \r\n    // Navigate with error handling\r\n    try {\r\n      navigate('/login');\r\n    } catch (error) {\r\n      console.error('Navigation error:', error);\r\n      window.location.href = '/login';\r\n    }\r\n  };\r\n\r\n  // ENHANCED: Get dashboard statistics including batch data\r\n  const getDashboardStats = () => {\r\n    const stats = {\r\n      totalPredictions: 0,\r\n      totalPatients: 0,\r\n      batchAnalyses: 0,\r\n      chatSessions: Object.keys(chatHistory).length,\r\n      totalMessages: Object.values(chatHistory).reduce((total, messages) => total + messages.length, 0)\r\n    };\r\n\r\n    // Add batch results to stats\r\n    if (batchResults && Array.isArray(batchResults)) {\r\n      stats.batchAnalyses = 1;\r\n      stats.totalPatients += batchResults.length;\r\n      stats.totalPredictions += batchResults.length;\r\n    }\r\n\r\n    return stats;\r\n  };\r\n\r\n  const contextValue = {\r\n    // Existing functionality\r\n    currentChat,\r\n    setCurrentChat,\r\n    predictionData,\r\n    setPredictionData,\r\n    dashboardData,\r\n    setDashboardData,\r\n    resetChat,\r\n    resetPrediction,\r\n    resetDashboard,\r\n    logout,\r\n    \r\n    // ENHANCED: Batch functionality with dashboard integration\r\n    batchResults,\r\n    batchFileName,\r\n    setBatchPredictionResults,\r\n    clearBatchResults,\r\n    \r\n    // ENHANCED: Chat functionality with session management\r\n    chatHistory,\r\n    addToChatHistory,\r\n    getChatHistory,\r\n    clearChatHistory,\r\n    activeSessionId,\r\n    setActiveSession,\r\n    getActiveSession,\r\n    \r\n    // CRITICAL FIX: New functions for user data management\r\n    clearAllUserData,\r\n    clearUserSpecificData,\r\n    \r\n    // Additional utilities\r\n    getDashboardStats\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={contextValue}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAppContext = () => {\r\n  const context = useContext(AppContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAppContext must be used within an AppProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}