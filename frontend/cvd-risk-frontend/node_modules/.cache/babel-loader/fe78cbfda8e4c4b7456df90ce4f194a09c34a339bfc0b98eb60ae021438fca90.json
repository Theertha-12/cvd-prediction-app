{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\cvd-risk-project\\\\frontend\\\\cvd-risk-frontend\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../services/api';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppContext } from './AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('access_token'));\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const {\n    logout: appLogout,\n    clearAllUserData\n  } = useAppContext();\n  useEffect(() => {\n    const fetchUser = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      try {\n        var _userData$id, _userData$id2;\n        const res = await api.get('/auth/me');\n        const userData = res.data;\n\n        // CRITICAL FIX: Check if this is a different user\n        const currentUserId = localStorage.getItem('current_user_id');\n        if (currentUserId && currentUserId !== ((_userData$id = userData.id) === null || _userData$id === void 0 ? void 0 : _userData$id.toString())) {\n          console.log('üîÑ Different user detected, clearing previous user data...');\n          clearAllUserData(); // Clear all cached data from previous user\n        }\n\n        // Store current user ID for future comparison\n        localStorage.setItem('current_user_id', ((_userData$id2 = userData.id) === null || _userData$id2 === void 0 ? void 0 : _userData$id2.toString()) || '');\n        setUser(userData);\n      } catch (err) {\n        console.error('‚ùå Failed to fetch user:', err);\n        setUser(null);\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('current_user_id');\n        setToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUser();\n  }, [token, clearAllUserData]);\n  const login = async (email, password) => {\n    try {\n      var _userData$id3;\n      console.log('üîç LOGIN DEBUG - Input:', {\n        email,\n        password: '***'\n      });\n      const loginData = {\n        email: email,\n        password: password\n      };\n      console.log('üîç LOGIN DEBUG - Sending JSON:', {\n        email: loginData.email,\n        password: '***'\n      });\n      const res = await api.post('/auth/login', loginData, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('‚úÖ LOGIN SUCCESS:', res.data);\n      const accessToken = res.data.access_token;\n      if (!accessToken) {\n        throw new Error('No access_token in response');\n      }\n\n      // CRITICAL FIX: Clear any existing user data before setting new token\n      const existingUserId = localStorage.getItem('current_user_id');\n      if (existingUserId) {\n        console.log('üóëÔ∏è Clearing data from previous login session...');\n        clearAllUserData();\n      }\n      localStorage.setItem('access_token', accessToken);\n      setToken(accessToken);\n      const userRes = await api.get('/auth/me');\n      const userData = userRes.data;\n\n      // Store the new user ID\n      localStorage.setItem('current_user_id', ((_userData$id3 = userData.id) === null || _userData$id3 === void 0 ? void 0 : _userData$id3.toString()) || '');\n      setUser(userData);\n      return userData;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('‚ùå LOGIN ERROR:', error);\n      console.error('‚ùå LOGIN ERROR - Response:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      console.error('‚ùå LOGIN ERROR - Status:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status);\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      console.log('üìù REGISTER DEBUG - Registering new user...');\n\n      // CRITICAL FIX: Clear any existing user data before registration\n      const existingUserId = localStorage.getItem('current_user_id');\n      if (existingUserId) {\n        console.log('üóëÔ∏è Clearing data from previous user before registration...');\n        clearAllUserData();\n      }\n      const res = await api.post('/auth/register', userData);\n      console.log('‚úÖ REGISTRATION SUCCESS:', res.data);\n      return res.data;\n    } catch (error) {\n      console.error('‚ùå REGISTRATION ERROR:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    console.log('üö™ Logging out and clearing all user data...');\n\n    // Call app logout to clear session data\n    appLogout();\n\n    // Clear auth-specific data\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('current_user_id');\n    setToken(null);\n    setUser(null);\n    navigate('/login');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      loading,\n      isAuthenticated: !!user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"OMQim/PV5vBteRP7UQxyvB3VSlU=\", false, function () {\n  return [useNavigate, useAppContext];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","useNavigate","useAppContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","localStorage","getItem","loading","setLoading","navigate","logout","appLogout","clearAllUserData","fetchUser","_userData$id","_userData$id2","res","get","userData","data","currentUserId","id","toString","console","log","setItem","err","error","removeItem","login","email","password","_userData$id3","loginData","post","headers","accessToken","access_token","Error","existingUserId","userRes","_error$response","_error$response2","response","status","register","Provider","value","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport api from '../services/api';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAppContext } from './AppContext';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('access_token'));\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const { logout: appLogout, clearAllUserData } = useAppContext();\r\n\r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      if (!token) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        const res = await api.get('/auth/me');\r\n        const userData = res.data;\r\n        \r\n        // CRITICAL FIX: Check if this is a different user\r\n        const currentUserId = localStorage.getItem('current_user_id');\r\n        if (currentUserId && currentUserId !== userData.id?.toString()) {\r\n          console.log('üîÑ Different user detected, clearing previous user data...');\r\n          clearAllUserData(); // Clear all cached data from previous user\r\n        }\r\n        \r\n        // Store current user ID for future comparison\r\n        localStorage.setItem('current_user_id', userData.id?.toString() || '');\r\n        \r\n        setUser(userData);\r\n      } catch (err) {\r\n        console.error('‚ùå Failed to fetch user:', err);\r\n        setUser(null);\r\n        localStorage.removeItem('access_token');\r\n        localStorage.removeItem('current_user_id');\r\n        setToken(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, [token, clearAllUserData]);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      console.log('üîç LOGIN DEBUG - Input:', { email, password: '***' });\r\n      \r\n      const loginData = {\r\n        email: email,\r\n        password: password\r\n      };\r\n      \r\n      console.log('üîç LOGIN DEBUG - Sending JSON:', { \r\n        email: loginData.email, \r\n        password: '***' \r\n      });\r\n\r\n      const res = await api.post('/auth/login', loginData, {\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      });\r\n\r\n      console.log('‚úÖ LOGIN SUCCESS:', res.data);\r\n\r\n      const accessToken = res.data.access_token;\r\n      \r\n      if (!accessToken) {\r\n        throw new Error('No access_token in response');\r\n      }\r\n\r\n      // CRITICAL FIX: Clear any existing user data before setting new token\r\n      const existingUserId = localStorage.getItem('current_user_id');\r\n      if (existingUserId) {\r\n        console.log('üóëÔ∏è Clearing data from previous login session...');\r\n        clearAllUserData();\r\n      }\r\n\r\n      localStorage.setItem('access_token', accessToken);\r\n      setToken(accessToken);\r\n\r\n      const userRes = await api.get('/auth/me');\r\n      const userData = userRes.data;\r\n      \r\n      // Store the new user ID\r\n      localStorage.setItem('current_user_id', userData.id?.toString() || '');\r\n      setUser(userData);\r\n      \r\n      return userData;\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå LOGIN ERROR:', error);\r\n      console.error('‚ùå LOGIN ERROR - Response:', error.response?.data);\r\n      console.error('‚ùå LOGIN ERROR - Status:', error.response?.status);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      console.log('üìù REGISTER DEBUG - Registering new user...');\r\n      \r\n      // CRITICAL FIX: Clear any existing user data before registration\r\n      const existingUserId = localStorage.getItem('current_user_id');\r\n      if (existingUserId) {\r\n        console.log('üóëÔ∏è Clearing data from previous user before registration...');\r\n        clearAllUserData();\r\n      }\r\n      \r\n      const res = await api.post('/auth/register', userData);\r\n      console.log('‚úÖ REGISTRATION SUCCESS:', res.data);\r\n      \r\n      return res.data;\r\n    } catch (error) {\r\n      console.error('‚ùå REGISTRATION ERROR:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    console.log('üö™ Logging out and clearing all user data...');\r\n    \r\n    // Call app logout to clear session data\r\n    appLogout();\r\n    \r\n    // Clear auth-specific data\r\n    localStorage.removeItem('access_token');\r\n    localStorage.removeItem('current_user_id');\r\n    setToken(null);\r\n    setUser(null);\r\n    navigate('/login');\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      user,\r\n      login,\r\n      register,\r\n      logout,\r\n      loading,\r\n      isAuthenticated: !!user\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}