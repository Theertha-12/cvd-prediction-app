{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\cvd-risk-project\\\\frontend\\\\cvd-risk-frontend\\\\src\\\\pages\\\\BatchPredict.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DashboardLayout from '../layouts/DashboardLayout';\nimport FileUploader from '../components/batch/FileUploader';\nimport BatchResults from '../components/batch/BatchResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BatchPredict = () => {\n  _s();\n  const [results, setResults] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [uploadedFileName, setUploadedFileName] = useState('');\n  const handleFileUpload = async file => {\n    setIsLoading(true);\n    setUploadedFileName(file.name);\n    try {\n      // Process the uploaded file\n      // This is where you'd call your API\n      console.log('Processing file:', file.name);\n\n      // For now, simulate processing\n      setTimeout(() => {\n        setResults([{\n          id: 1,\n          name: 'John Doe',\n          age: 45,\n          risk: 'High',\n          score: 0.85\n        }, {\n          id: 2,\n          name: 'Jane Smith',\n          age: 38,\n          risk: 'Medium',\n          score: 0.62\n        }, {\n          id: 3,\n          name: 'Bob Johnson',\n          age: 52,\n          risk: 'Low',\n          score: 0.23\n        }]);\n        setIsLoading(false);\n      }, 2000);\n    } catch (error) {\n      console.error('Error processing file:', error);\n      setIsLoading(false);\n    }\n  };\n  const handleClearResults = () => {\n    setResults(null);\n    setUploadedFileName('');\n  };\n  return /*#__PURE__*/_jsxDEV(DashboardLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-sm p-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-2xl font-bold text-gray-900 mb-2\",\n          children: \"Batch Prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600\",\n          children: \"Upload a CSV file to predict cardiovascular risk for multiple patients at once\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-sm p-6\",\n        children: /*#__PURE__*/_jsxDEV(FileUploader, {\n          onFileUpload: handleFileUpload,\n          isLoading: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), results ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-sm p-6\",\n        children: /*#__PURE__*/_jsxDEV(BatchResults, {\n          results: results,\n          onClear: handleClearResults,\n          filename: uploadedFileName || 'batch_results.csv'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white rounded-lg shadow-sm p-6\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center py-12\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-gray-400 mb-4\",\n            children: /*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"mx-auto h-12 w-12\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: 1,\n                d: \"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-medium text-gray-900 mb-2\",\n            children: \"No results yet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-gray-500\",\n            children: \"Upload a CSV file to see batch prediction results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(BatchPredict, \"HPXvjtK/oM1gnjjN20DLYLovJZE=\");\n_c = BatchPredict;\nexport default BatchPredict;\nvar _c;\n$RefreshReg$(_c, \"BatchPredict\");","map":{"version":3,"names":["React","useState","DashboardLayout","FileUploader","BatchResults","jsxDEV","_jsxDEV","BatchPredict","_s","results","setResults","isLoading","setIsLoading","uploadedFileName","setUploadedFileName","handleFileUpload","file","name","console","log","setTimeout","id","age","risk","score","error","handleClearResults","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onFileUpload","onClear","filename","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/pages/BatchPredict.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport DashboardLayout from '../layouts/DashboardLayout';\r\nimport FileUploader from '../components/batch/FileUploader';\r\nimport BatchResults from '../components/batch/BatchResults';\r\n\r\nconst BatchPredict = () => {\r\n  const [results, setResults] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [uploadedFileName, setUploadedFileName] = useState('');\r\n\r\n  const handleFileUpload = async (file) => {\r\n    setIsLoading(true);\r\n    setUploadedFileName(file.name);\r\n    try {\r\n      // Process the uploaded file\r\n      // This is where you'd call your API\r\n      console.log('Processing file:', file.name);\r\n      \r\n      // For now, simulate processing\r\n      setTimeout(() => {\r\n        setResults([\r\n          { id: 1, name: 'John Doe', age: 45, risk: 'High', score: 0.85 },\r\n          { id: 2, name: 'Jane Smith', age: 38, risk: 'Medium', score: 0.62 },\r\n          { id: 3, name: 'Bob Johnson', age: 52, risk: 'Low', score: 0.23 }\r\n        ]);\r\n        setIsLoading(false);\r\n      }, 2000);\r\n      \r\n    } catch (error) {\r\n      console.error('Error processing file:', error);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClearResults = () => {\r\n    setResults(null);\r\n    setUploadedFileName('');\r\n  };\r\n\r\n  return (\r\n    <DashboardLayout>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\r\n            Batch Prediction\r\n          </h1>\r\n          <p className=\"text-gray-600\">\r\n            Upload a CSV file to predict cardiovascular risk for multiple patients at once\r\n          </p>\r\n        </div>\r\n\r\n        {/* File Uploader */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n          <FileUploader \r\n            onFileUpload={handleFileUpload}\r\n            isLoading={isLoading}\r\n          />\r\n        </div>\r\n\r\n        {/* Results */}\r\n        {results ? (\r\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n            <BatchResults \r\n              results={results}\r\n              onClear={handleClearResults}\r\n              filename={uploadedFileName || 'batch_results.csv'}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\r\n            <div className=\"text-center py-12\">\r\n              <div className=\"text-gray-400 mb-4\">\r\n                <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\r\n                </svg>\r\n              </div>\r\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No results yet</h3>\r\n              <p className=\"text-gray-500\">\r\n                Upload a CSV file to see batch prediction results\r\n              </p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </DashboardLayout>\r\n  );\r\n};\r\n\r\nexport default BatchPredict;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}