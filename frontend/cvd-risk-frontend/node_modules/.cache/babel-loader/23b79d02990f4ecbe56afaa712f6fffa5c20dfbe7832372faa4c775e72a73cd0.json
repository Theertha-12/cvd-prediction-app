{"ast":null,"code":"import api from './api';\nexport const getDashboardData = async userRole => {\n  try {\n    // Try multiple possible endpoints\n    const possibleEndpoints = [`/dashboard/${userRole}`, `/dashboard`, `/user/dashboard`, `/api/dashboard/${userRole}`, `/api/dashboard`];\n    let response = null;\n    let lastError = null;\n\n    // Try each endpoint until one works\n    for (const endpoint of possibleEndpoints) {\n      try {\n        console.log(`📊 Trying dashboard endpoint: ${endpoint}`);\n        response = await api.get(endpoint);\n        console.log(`✅ Success with endpoint: ${endpoint}`, response.data);\n        break;\n      } catch (error) {\n        var _error$response;\n        console.log(`❌ Failed endpoint: ${endpoint}`, (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n        lastError = error;\n        continue;\n      }\n    }\n\n    // If no endpoint worked, try to construct data from other available endpoints\n    if (!response) {\n      console.log('📊 No dashboard endpoint found, trying to construct from other APIs...');\n      return await constructDashboardFromOtherAPIs(userRole);\n    }\n\n    // Validate and clean the response\n    const data = {\n      user_info: response.data.user_info || {},\n      statistics: response.data.statistics || {\n        total_predictions: 0,\n        recent_predictions: 0,\n        recent_activity: 0,\n        total_patients: userRole === 'doctor' ? 0 : null,\n        risk_distribution: {\n          High: 0,\n          Moderate: 0,\n          Low: 0\n        }\n      },\n      latest_prediction: response.data.latest_prediction || null,\n      recent_predictions: response.data.recent_predictions || [],\n      recent_activities: response.data.recent_activities || []\n    };\n    return data;\n  } catch (error) {\n    console.error('All dashboard endpoints failed:', error);\n    throw error;\n  }\n};\n\n// Fallback: construct dashboard data from other available APIs\nconst constructDashboardFromOtherAPIs = async userRole => {\n  try {\n    console.log('📊 Constructing dashboard from available APIs...');\n    const dashboardData = {\n      user_info: {},\n      statistics: {\n        total_predictions: 0,\n        recent_predictions: 0,\n        recent_activity: 0,\n        total_patients: userRole === 'doctor' ? 0 : null,\n        risk_distribution: {\n          High: 0,\n          Moderate: 0,\n          Low: 0\n        }\n      },\n      latest_prediction: null,\n      recent_predictions: [],\n      recent_activities: []\n    };\n\n    // Try to get user info\n    try {\n      const userResponse = await api.get('/user/profile');\n      dashboardData.user_info = userResponse.data;\n      console.log('✅ Got user info from /user/profile');\n    } catch (error) {\n      console.log('❌ /user/profile not available');\n      try {\n        const authResponse = await api.get('/auth/me');\n        dashboardData.user_info = authResponse.data;\n        console.log('✅ Got user info from /auth/me');\n      } catch (error) {\n        console.log('❌ /auth/me not available');\n      }\n    }\n\n    // Try to get prediction history\n    try {\n      const predictionsResponse = await api.get('/predict/history');\n      const predictions = predictionsResponse.data;\n      if (Array.isArray(predictions)) {\n        dashboardData.recent_predictions = predictions.slice(0, 5);\n        dashboardData.latest_prediction = predictions[0] || null;\n        dashboardData.statistics.total_predictions = predictions.length;\n        dashboardData.statistics.recent_predictions = predictions.filter(p => {\n          const daysDiff = (new Date() - new Date(p.created_at)) / (1000 * 60 * 60 * 24);\n          return daysDiff <= 7;\n        }).length;\n\n        // Calculate risk distribution\n        const riskCounts = {\n          High: 0,\n          Moderate: 0,\n          Low: 0\n        };\n        predictions.forEach(p => {\n          if (p.risk_category && riskCounts.hasOwnProperty(p.risk_category)) {\n            riskCounts[p.risk_category]++;\n          }\n        });\n        dashboardData.statistics.risk_distribution = riskCounts;\n      }\n      console.log('✅ Got predictions from /predict/history');\n    } catch (error) {\n      console.log('❌ /predict/history not available');\n    }\n\n    // Try to get patient list (for doctors)\n    if (userRole === 'doctor') {\n      try {\n        const patientsResponse = await api.get('/patients');\n        if (Array.isArray(patientsResponse.data)) {\n          dashboardData.statistics.total_patients = patientsResponse.data.length;\n        }\n        console.log('✅ Got patients from /patients');\n      } catch (error) {\n        console.log('❌ /patients not available');\n      }\n    }\n\n    // Create some recent activities based on available data\n    dashboardData.recent_activities = generateActivitiesFromData(dashboardData, userRole);\n    dashboardData.statistics.recent_activity = dashboardData.recent_activities.length;\n    console.log('📊 Constructed dashboard data:', dashboardData);\n    return dashboardData;\n  } catch (error) {\n    console.error('Failed to construct dashboard data:', error);\n    throw new Error('Unable to load dashboard data from any available endpoint');\n  }\n};\nconst generateActivitiesFromData = (data, userRole) => {\n  const activities = [];\n  if (data.latest_prediction) {\n    activities.push({\n      id: 1,\n      description: userRole === 'doctor' ? 'Patient risk assessment completed' : 'CVD risk prediction completed',\n      target: `${data.latest_prediction.risk_percentage}% risk level`,\n      date: data.latest_prediction.created_at || new Date().toISOString()\n    });\n  }\n  if (data.recent_predictions && data.recent_predictions.length > 1) {\n    activities.push({\n      id: 2,\n      description: 'Previous prediction reviewed',\n      target: 'Historical data accessed',\n      date: data.recent_predictions[1].created_at || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n    });\n  }\n\n  // Add profile activity\n  activities.push({\n    id: 3,\n    description: 'Profile accessed',\n    target: 'Dashboard viewed',\n    date: new Date().toISOString()\n  });\n  return activities;\n};","map":{"version":3,"names":["api","getDashboardData","userRole","possibleEndpoints","response","lastError","endpoint","console","log","get","data","error","_error$response","status","constructDashboardFromOtherAPIs","user_info","statistics","total_predictions","recent_predictions","recent_activity","total_patients","risk_distribution","High","Moderate","Low","latest_prediction","recent_activities","dashboardData","userResponse","authResponse","predictionsResponse","predictions","Array","isArray","slice","length","filter","p","daysDiff","Date","created_at","riskCounts","forEach","risk_category","hasOwnProperty","patientsResponse","generateActivitiesFromData","Error","activities","push","id","description","target","risk_percentage","date","toISOString","now"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/services/api.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const getDashboardData = async (userRole) => {\r\n  try {\r\n    // Try multiple possible endpoints\r\n    const possibleEndpoints = [\r\n      `/dashboard/${userRole}`,\r\n      `/dashboard`,\r\n      `/user/dashboard`,\r\n      `/api/dashboard/${userRole}`,\r\n      `/api/dashboard`\r\n    ];\r\n\r\n    let response = null;\r\n    let lastError = null;\r\n\r\n    // Try each endpoint until one works\r\n    for (const endpoint of possibleEndpoints) {\r\n      try {\r\n        console.log(`📊 Trying dashboard endpoint: ${endpoint}`);\r\n        response = await api.get(endpoint);\r\n        console.log(`✅ Success with endpoint: ${endpoint}`, response.data);\r\n        break;\r\n      } catch (error) {\r\n        console.log(`❌ Failed endpoint: ${endpoint}`, error.response?.status);\r\n        lastError = error;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // If no endpoint worked, try to construct data from other available endpoints\r\n    if (!response) {\r\n      console.log('📊 No dashboard endpoint found, trying to construct from other APIs...');\r\n      return await constructDashboardFromOtherAPIs(userRole);\r\n    }\r\n\r\n    // Validate and clean the response\r\n    const data = {\r\n      user_info: response.data.user_info || {},\r\n      statistics: response.data.statistics || {\r\n        total_predictions: 0,\r\n        recent_predictions: 0,\r\n        recent_activity: 0,\r\n        total_patients: userRole === 'doctor' ? 0 : null,\r\n        risk_distribution: { High: 0, Moderate: 0, Low: 0 }\r\n      },\r\n      latest_prediction: response.data.latest_prediction || null,\r\n      recent_predictions: response.data.recent_predictions || [],\r\n      recent_activities: response.data.recent_activities || []\r\n    };\r\n\r\n    return data;\r\n\r\n  } catch (error) {\r\n    console.error('All dashboard endpoints failed:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fallback: construct dashboard data from other available APIs\r\nconst constructDashboardFromOtherAPIs = async (userRole) => {\r\n  try {\r\n    console.log('📊 Constructing dashboard from available APIs...');\r\n    \r\n    const dashboardData = {\r\n      user_info: {},\r\n      statistics: {\r\n        total_predictions: 0,\r\n        recent_predictions: 0,\r\n        recent_activity: 0,\r\n        total_patients: userRole === 'doctor' ? 0 : null,\r\n        risk_distribution: { High: 0, Moderate: 0, Low: 0 }\r\n      },\r\n      latest_prediction: null,\r\n      recent_predictions: [],\r\n      recent_activities: []\r\n    };\r\n\r\n    // Try to get user info\r\n    try {\r\n      const userResponse = await api.get('/user/profile');\r\n      dashboardData.user_info = userResponse.data;\r\n      console.log('✅ Got user info from /user/profile');\r\n    } catch (error) {\r\n      console.log('❌ /user/profile not available');\r\n      try {\r\n        const authResponse = await api.get('/auth/me');\r\n        dashboardData.user_info = authResponse.data;\r\n        console.log('✅ Got user info from /auth/me');\r\n      } catch (error) {\r\n        console.log('❌ /auth/me not available');\r\n      }\r\n    }\r\n\r\n    // Try to get prediction history\r\n    try {\r\n      const predictionsResponse = await api.get('/predict/history');\r\n      const predictions = predictionsResponse.data;\r\n      \r\n      if (Array.isArray(predictions)) {\r\n        dashboardData.recent_predictions = predictions.slice(0, 5);\r\n        dashboardData.latest_prediction = predictions[0] || null;\r\n        dashboardData.statistics.total_predictions = predictions.length;\r\n        dashboardData.statistics.recent_predictions = predictions.filter(p => {\r\n          const daysDiff = (new Date() - new Date(p.created_at)) / (1000 * 60 * 60 * 24);\r\n          return daysDiff <= 7;\r\n        }).length;\r\n\r\n        // Calculate risk distribution\r\n        const riskCounts = { High: 0, Moderate: 0, Low: 0 };\r\n        predictions.forEach(p => {\r\n          if (p.risk_category && riskCounts.hasOwnProperty(p.risk_category)) {\r\n            riskCounts[p.risk_category]++;\r\n          }\r\n        });\r\n        dashboardData.statistics.risk_distribution = riskCounts;\r\n      }\r\n      console.log('✅ Got predictions from /predict/history');\r\n    } catch (error) {\r\n      console.log('❌ /predict/history not available');\r\n    }\r\n\r\n    // Try to get patient list (for doctors)\r\n    if (userRole === 'doctor') {\r\n      try {\r\n        const patientsResponse = await api.get('/patients');\r\n        if (Array.isArray(patientsResponse.data)) {\r\n          dashboardData.statistics.total_patients = patientsResponse.data.length;\r\n        }\r\n        console.log('✅ Got patients from /patients');\r\n      } catch (error) {\r\n        console.log('❌ /patients not available');\r\n      }\r\n    }\r\n\r\n    // Create some recent activities based on available data\r\n    dashboardData.recent_activities = generateActivitiesFromData(dashboardData, userRole);\r\n    dashboardData.statistics.recent_activity = dashboardData.recent_activities.length;\r\n\r\n    console.log('📊 Constructed dashboard data:', dashboardData);\r\n    return dashboardData;\r\n\r\n  } catch (error) {\r\n    console.error('Failed to construct dashboard data:', error);\r\n    throw new Error('Unable to load dashboard data from any available endpoint');\r\n  }\r\n};\r\n\r\nconst generateActivitiesFromData = (data, userRole) => {\r\n  const activities = [];\r\n  \r\n  if (data.latest_prediction) {\r\n    activities.push({\r\n      id: 1,\r\n      description: userRole === 'doctor' ? 'Patient risk assessment completed' : 'CVD risk prediction completed',\r\n      target: `${data.latest_prediction.risk_percentage}% risk level`,\r\n      date: data.latest_prediction.created_at || new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  if (data.recent_predictions && data.recent_predictions.length > 1) {\r\n    activities.push({\r\n      id: 2,\r\n      description: 'Previous prediction reviewed',\r\n      target: 'Historical data accessed',\r\n      date: data.recent_predictions[1].created_at || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n    });\r\n  }\r\n\r\n  // Add profile activity\r\n  activities.push({\r\n    id: 3,\r\n    description: 'Profile accessed',\r\n    target: 'Dashboard viewed',\r\n    date: new Date().toISOString()\r\n  });\r\n\r\n  return activities;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}