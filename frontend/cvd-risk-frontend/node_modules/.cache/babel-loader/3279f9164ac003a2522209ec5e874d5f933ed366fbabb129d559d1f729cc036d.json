{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\cvd-risk-project\\\\frontend\\\\cvd-risk-frontend\\\\src\\\\context\\\\ChatContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport api from '../api/axios'; // Import the configured axios instance\nimport { useAuth } from './AuthContext'; // To check authentication status\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(null);\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated,\n    token\n  } = useAuth(); // Get user and auth status\n  const [sessions, setSessions] = useState([]);\n  const [loadingSessions, setLoadingSessions] = useState(true);\n  const [errorSessions, setErrorSessions] = useState(null);\n  const fetchSessions = useCallback(async () => {\n    if (!isAuthenticated) {\n      setSessions([]);\n      setLoadingSessions(false);\n      setErrorSessions(\"Not authenticated.\");\n      return;\n    }\n    setLoadingSessions(true);\n    setErrorSessions(null);\n    try {\n      // Ensure the endpoint path is correct: /api/chat/sessions\n      const response = await api.get('/chat/sessions');\n      setSessions(response.data);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Failed to load chat sessions:', error);\n      setErrorSessions(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Failed to load chat sessions.');\n      setSessions([]); // Clear sessions on error\n    } finally {\n      setLoadingSessions(false);\n    }\n  }, [isAuthenticated]); // Re-run if isAuthenticated changes\n\n  // Fetch sessions when component mounts or user authentication status changes\n  useEffect(() => {\n    fetchSessions();\n  }, [fetchSessions]);\n  const createSession = useCallback(async title => {\n    if (!isAuthenticated) {\n      setErrorSessions(\"Not authenticated. Cannot create session.\");\n      throw new Error(\"Not authenticated.\");\n    }\n    try {\n      const response = await api.post('/chat/sessions', {\n        title\n      });\n      setSessions(prevSessions => [...prevSessions, response.data]);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Failed to create chat session:', error);\n      setErrorSessions(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Failed to create chat session.');\n      throw error;\n    }\n  }, [isAuthenticated]);\n  const value = {\n    sessions,\n    loadingSessions,\n    errorSessions,\n    fetchSessions,\n    createSession\n    // Add other chat-related functions like fetchMessages, sendMessage etc.\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n};\n_s(ChatProvider, \"1kpvs7QYzPBXF0CRhZX1XPa+PEA=\", false, function () {\n  return [useAuth];\n});\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","api","useAuth","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","isAuthenticated","token","sessions","setSessions","loadingSessions","setLoadingSessions","errorSessions","setErrorSessions","fetchSessions","response","get","data","error","_error$response","_error$response$data","console","detail","createSession","title","Error","post","prevSessions","_error$response2","_error$response2$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/context/ChatContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport api from '../api/axios'; // Import the configured axios instance\r\nimport { useAuth } from './AuthContext'; // To check authentication status\r\n\r\nconst ChatContext = createContext(null);\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { user, isAuthenticated, token } = useAuth(); // Get user and auth status\r\n  const [sessions, setSessions] = useState([]);\r\n  const [loadingSessions, setLoadingSessions] = useState(true);\r\n  const [errorSessions, setErrorSessions] = useState(null);\r\n\r\n  const fetchSessions = useCallback(async () => {\r\n    if (!isAuthenticated) {\r\n      setSessions([]);\r\n      setLoadingSessions(false);\r\n      setErrorSessions(\"Not authenticated.\");\r\n      return;\r\n    }\r\n\r\n    setLoadingSessions(true);\r\n    setErrorSessions(null);\r\n    try {\r\n      // Ensure the endpoint path is correct: /api/chat/sessions\r\n      const response = await api.get('/chat/sessions');\r\n      setSessions(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to load chat sessions:', error);\r\n      setErrorSessions(error.response?.data?.detail || 'Failed to load chat sessions.');\r\n      setSessions([]); // Clear sessions on error\r\n    } finally {\r\n      setLoadingSessions(false);\r\n    }\r\n  }, [isAuthenticated]); // Re-run if isAuthenticated changes\r\n\r\n  // Fetch sessions when component mounts or user authentication status changes\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, [fetchSessions]);\r\n\r\n  const createSession = useCallback(async (title) => {\r\n    if (!isAuthenticated) {\r\n      setErrorSessions(\"Not authenticated. Cannot create session.\");\r\n      throw new Error(\"Not authenticated.\");\r\n    }\r\n    try {\r\n      const response = await api.post('/chat/sessions', { title });\r\n      setSessions((prevSessions) => [...prevSessions, response.data]);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to create chat session:', error);\r\n      setErrorSessions(error.response?.data?.detail || 'Failed to create chat session.');\r\n      throw error;\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  const value = {\r\n    sessions,\r\n    loadingSessions,\r\n    errorSessions,\r\n    fetchSessions,\r\n    createSession,\r\n    // Add other chat-related functions like fetchMessages, sendMessage etc.\r\n  };\r\n\r\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\r\n};\r\n\r\nexport const useChat = () => {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}