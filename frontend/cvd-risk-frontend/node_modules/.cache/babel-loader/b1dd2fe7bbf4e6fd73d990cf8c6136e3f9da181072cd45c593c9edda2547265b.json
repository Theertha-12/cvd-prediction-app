{"ast":null,"code":"// src/services/auth.js\nimport api from './api';\nexport const login = async (email, password) => {\n  // Create a URLSearchParams object to format data as application/x-www-form-urlencoded\n  const formData = new URLSearchParams();\n  formData.append('username', email); // Map 'email' from frontend to 'username' expected by backend\n  formData.append('password', password); // Pass the password\n\n  try {\n    const response = await api.post(\n    // --- CRITICAL CHANGE HERE ---\n    // Your FastAPI backend's standard OAuth2 token endpoint is '/token'.\n    // This is the one configured with OAuth2PasswordRequestForm.\n    '/token',\n    // <--- CHANGED FROM '/auth/login' TO '/token'\n    formData.toString(),\n    // Convert URLSearchParams to the required string format\n    {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded' // Crucial header for FastAPI to correctly parse the form data\n      }\n    });\n    // If successful, you might get an access_token here.\n    // Make sure to store it (e.g., in localStorage) for subsequent authenticated requests.\n    // Example: localStorage.setItem('access_token', response.data.access_token);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    // Log the error for debugging.\n    console.error(\"Login request failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    // Re-throw the error so it can be handled by the component calling this function.\n    throw error;\n  }\n};\nexport const register = async userData => {\n  // Assuming '/auth/register' endpoint and JSON userData are correct for registration.\n  const response = await api.post('/auth/register', userData);\n  return response.data;\n};\nexport const getCurrentUser = async () => {\n  try {\n    // Assuming '/auth/me' endpoint is correct for fetching current user.\n    const response = await api.get('/auth/me');\n    return response.data;\n  } catch (error) {\n    // Return null or re-throw error based on how you want to handle no current user.\n    return null;\n  }\n};\nexport const logout = () => {\n  // Clear the stored access token upon logout.\n  localStorage.removeItem('access_token');\n};","map":{"version":3,"names":["api","login","email","password","formData","URLSearchParams","append","response","post","toString","headers","data","error","_error$response","console","message","register","userData","getCurrentUser","get","logout","localStorage","removeItem"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/services/auth.js"],"sourcesContent":["// src/services/auth.js\r\nimport api from './api';\r\n\r\nexport const login = async (email, password) => {\r\n  // Create a URLSearchParams object to format data as application/x-www-form-urlencoded\r\n  const formData = new URLSearchParams();\r\n  formData.append('username', email); // Map 'email' from frontend to 'username' expected by backend\r\n  formData.append('password', password); // Pass the password\r\n\r\n  try {\r\n    const response = await api.post(\r\n      // --- CRITICAL CHANGE HERE ---\r\n      // Your FastAPI backend's standard OAuth2 token endpoint is '/token'.\r\n      // This is the one configured with OAuth2PasswordRequestForm.\r\n      '/token', // <--- CHANGED FROM '/auth/login' TO '/token'\r\n      formData.toString(), // Convert URLSearchParams to the required string format\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded' // Crucial header for FastAPI to correctly parse the form data\r\n        }\r\n      }\r\n    );\r\n    // If successful, you might get an access_token here.\r\n    // Make sure to store it (e.g., in localStorage) for subsequent authenticated requests.\r\n    // Example: localStorage.setItem('access_token', response.data.access_token);\r\n    return response.data;\r\n  } catch (error) {\r\n    // Log the error for debugging.\r\n    console.error(\"Login request failed:\", error.response?.data || error.message);\r\n    // Re-throw the error so it can be handled by the component calling this function.\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  // Assuming '/auth/register' endpoint and JSON userData are correct for registration.\r\n  const response = await api.post('/auth/register', userData);\r\n  return response.data;\r\n};\r\n\r\nexport const getCurrentUser = async () => {\r\n  try {\r\n    // Assuming '/auth/me' endpoint is correct for fetching current user.\r\n    const response = await api.get('/auth/me');\r\n    return response.data;\r\n  } catch (error) {\r\n    // Return null or re-throw error based on how you want to handle no current user.\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const logout = () => {\r\n  // Clear the stored access token upon logout.\r\n  localStorage.removeItem('access_token');\r\n};"],"mappings":"AAAA;AACA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C;EACA,MAAMC,QAAQ,GAAG,IAAIC,eAAe,CAAC,CAAC;EACtCD,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEJ,KAAK,CAAC,CAAC,CAAC;EACpCE,QAAQ,CAACE,MAAM,CAAC,UAAU,EAAEH,QAAQ,CAAC,CAAC,CAAC;;EAEvC,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI;IAC7B;IACA;IACA;IACA,QAAQ;IAAE;IACVJ,QAAQ,CAACK,QAAQ,CAAC,CAAC;IAAE;IACrB;MACEC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC,CAAC;MACtD;IACF,CACF,CAAC;IACD;IACA;IACA;IACA,OAAOH,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd;IACAC,OAAO,CAACF,KAAK,CAAC,uBAAuB,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACG,OAAO,CAAC;IAC7E;IACA,MAAMH,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C;EACA,MAAMV,QAAQ,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,gBAAgB,EAAES,QAAQ,CAAC;EAC3D,OAAOV,QAAQ,CAACI,IAAI;AACtB,CAAC;AAED,OAAO,MAAMO,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF;IACA,MAAMX,QAAQ,GAAG,MAAMP,GAAG,CAACmB,GAAG,CAAC,UAAU,CAAC;IAC1C,OAAOZ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,OAAO,IAAI;EACb;AACF,CAAC;AAED,OAAO,MAAMQ,MAAM,GAAGA,CAAA,KAAM;EAC1B;EACAC,YAAY,CAACC,UAAU,CAAC,cAAc,CAAC;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}