{"ast":null,"code":"import api from './api';\n\n// Send a message to the chat API\nexport const sendChatMessage = async (message, sessionId = null) => {\n  try {\n    console.log('📤 Sending chat message:', {\n      message,\n      sessionId\n    });\n\n    // Try different request formats that backends commonly expect\n    const requestFormats = [\n    // Format 1: Simple message object\n    {\n      message: message,\n      session_id: sessionId\n    },\n    // Format 2: Content field\n    {\n      content: message,\n      session_id: sessionId\n    },\n    // Format 3: Text field\n    {\n      text: message,\n      session_id: sessionId\n    },\n    // Format 4: Query field (common for AI endpoints)\n    {\n      query: message,\n      session_id: sessionId\n    }];\n    let lastError = null;\n\n    // Try each format until one works\n    for (let i = 0; i < requestFormats.length; i++) {\n      try {\n        console.log(`📤 Trying request format ${i + 1}:`, requestFormats[i]);\n        const response = await api.post('/chat/message', requestFormats[i]);\n        console.log('✅ Chat API success with format', i + 1, ':', response.data);\n\n        // Normalize the response format\n        return {\n          id: response.data.id || Date.now(),\n          content: response.data.content || response.data.message || response.data.response || response.data.text,\n          sender: 'ai',\n          timestamp: response.data.timestamp || new Date().toISOString()\n        };\n      } catch (error) {\n        var _error$response, _error$response2;\n        console.log(`❌ Format ${i + 1} failed:`, (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n        lastError = error;\n        continue;\n      }\n    }\n\n    // If all formats failed, throw the last error\n    throw lastError;\n  } catch (error) {\n    var _error$response3, _error$response4, _error$response5, _error$response7, _error$response8;\n    console.error('Chat API error:', {\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      data: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data,\n      message: error.message\n    });\n\n    // Provide helpful error messages based on status\n    if (((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.status) === 422) {\n      var _error$response6, _error$response6$data;\n      const detail = (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.detail;\n      if (Array.isArray(detail)) {\n        const fieldErrors = detail.map(err => {\n          var _err$loc;\n          return `${(_err$loc = err.loc) === null || _err$loc === void 0 ? void 0 : _err$loc.join('.')} - ${err.msg}`;\n        }).join(', ');\n        throw new Error(`Invalid request format: ${fieldErrors}`);\n      } else {\n        throw new Error(`Invalid request format: ${detail || 'Please check the message format'}`);\n      }\n    } else if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) === 401) {\n      throw new Error('Authentication required - please login');\n    } else if (((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.status) === 500) {\n      throw new Error('Server error - please try again later');\n    } else if (!error.response) {\n      throw new Error('Network error - check if backend is running');\n    } else {\n      throw new Error(`Chat service error: ${error.message}`);\n    }\n  }\n};\n\n// Get chat sessions (if needed)\nexport const getChatSessions = async () => {\n  try {\n    const response = await api.get('/chat/sessions');\n    return response.data;\n  } catch (error) {\n    console.error('Failed to get chat sessions:', error);\n    throw error;\n  }\n};\n\n// Create a new chat session (if needed)\nexport const createChatSession = async (title = 'New Chat') => {\n  try {\n    const response = await api.post('/chat/sessions', {\n      title\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Failed to create chat session:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","sendChatMessage","message","sessionId","console","log","requestFormats","session_id","content","text","query","lastError","i","length","response","post","data","id","Date","now","sender","timestamp","toISOString","error","_error$response","_error$response2","status","_error$response3","_error$response4","_error$response5","_error$response7","_error$response8","_error$response6","_error$response6$data","detail","Array","isArray","fieldErrors","map","err","_err$loc","loc","join","msg","Error","getChatSessions","get","createChatSession","title"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/services/chat.js"],"sourcesContent":["import api from './api';\r\n\r\n// Send a message to the chat API\r\nexport const sendChatMessage = async (message, sessionId = null) => {\r\n  try {\r\n    console.log('📤 Sending chat message:', { message, sessionId });\r\n    \r\n    // Try different request formats that backends commonly expect\r\n    const requestFormats = [\r\n      // Format 1: Simple message object\r\n      {\r\n        message: message,\r\n        session_id: sessionId\r\n      },\r\n      // Format 2: Content field\r\n      {\r\n        content: message,\r\n        session_id: sessionId\r\n      },\r\n      // Format 3: Text field\r\n      {\r\n        text: message,\r\n        session_id: sessionId\r\n      },\r\n      // Format 4: Query field (common for AI endpoints)\r\n      {\r\n        query: message,\r\n        session_id: sessionId\r\n      }\r\n    ];\r\n\r\n    let lastError = null;\r\n\r\n    // Try each format until one works\r\n    for (let i = 0; i < requestFormats.length; i++) {\r\n      try {\r\n        console.log(`📤 Trying request format ${i + 1}:`, requestFormats[i]);\r\n        \r\n        const response = await api.post('/chat/message', requestFormats[i]);\r\n        \r\n        console.log('✅ Chat API success with format', i + 1, ':', response.data);\r\n        \r\n        // Normalize the response format\r\n        return {\r\n          id: response.data.id || Date.now(),\r\n          content: response.data.content || response.data.message || response.data.response || response.data.text,\r\n          sender: 'ai',\r\n          timestamp: response.data.timestamp || new Date().toISOString()\r\n        };\r\n        \r\n      } catch (error) {\r\n        console.log(`❌ Format ${i + 1} failed:`, error.response?.status, error.response?.data);\r\n        lastError = error;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // If all formats failed, throw the last error\r\n    throw lastError;\r\n\r\n  } catch (error) {\r\n    console.error('Chat API error:', {\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n      message: error.message\r\n    });\r\n\r\n    // Provide helpful error messages based on status\r\n    if (error.response?.status === 422) {\r\n      const detail = error.response?.data?.detail;\r\n      if (Array.isArray(detail)) {\r\n        const fieldErrors = detail.map(err => `${err.loc?.join('.')} - ${err.msg}`).join(', ');\r\n        throw new Error(`Invalid request format: ${fieldErrors}`);\r\n      } else {\r\n        throw new Error(`Invalid request format: ${detail || 'Please check the message format'}`);\r\n      }\r\n    } else if (error.response?.status === 401) {\r\n      throw new Error('Authentication required - please login');\r\n    } else if (error.response?.status === 500) {\r\n      throw new Error('Server error - please try again later');\r\n    } else if (!error.response) {\r\n      throw new Error('Network error - check if backend is running');\r\n    } else {\r\n      throw new Error(`Chat service error: ${error.message}`);\r\n    }\r\n  }\r\n};\r\n\r\n// Get chat sessions (if needed)\r\nexport const getChatSessions = async () => {\r\n  try {\r\n    const response = await api.get('/chat/sessions');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Failed to get chat sessions:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Create a new chat session (if needed)\r\nexport const createChatSession = async (title = 'New Chat') => {\r\n  try {\r\n    const response = await api.post('/chat/sessions', { title });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Failed to create chat session:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}