{"ast":null,"code":"import api from './api';\nexport const sendChatMessage = async (message, sessionId, predictionContext = null) => {\n  // Ensure message is not empty\n  if (!message || !message.trim()) {\n    throw new Error('Message cannot be empty');\n  }\n\n  // Ensure sessionId is valid\n  if (!sessionId || !sessionId.trim()) {\n    throw new Error('Session ID is required');\n  }\n\n  // Transform predictionContext to match backend schema expectations\n  let transformedContext = null;\n  if (predictionContext) {\n    transformedContext = {\n      patientId: predictionContext.patientId || predictionContext.patient_id,\n      riskScore: predictionContext.riskScore || predictionContext.risk_score,\n      riskCategory: predictionContext.riskCategory || predictionContext.risk_category,\n      keyFactors: predictionContext.keyFactors || predictionContext.key_factors || []\n    };\n\n    // Only include if we have at least some required data\n    if (!transformedContext.patientId && !transformedContext.riskScore && !transformedContext.riskCategory) {\n      transformedContext = null;\n    }\n  }\n  try {\n    const response = await api.post('/chat/message', {\n      message: message.trim(),\n      // Ensure no extra whitespace\n      session_id: sessionId.trim(),\n      prediction_context: transformedContext\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response2;\n    // Enhanced error logging for debugging\n    console.error('❌ Chat API Error:', {\n      message: error.message,\n      status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n      data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n      requestData: {\n        message: message.trim(),\n        session_id: sessionId.trim(),\n        prediction_context: transformedContext\n      }\n    });\n    throw error;\n  }\n};\nexport const getChatHistory = async (sessionId, limit = 50) => {\n  if (!sessionId || !sessionId.trim()) {\n    throw new Error('Session ID is required for chat history');\n  }\n  try {\n    const response = await api.get(`/chat/history/${sessionId.trim()}`, {\n      params: {\n        limit\n      }\n    });\n    return response.data.messages || response.data; // Handle both response formats\n  } catch (error) {\n    var _error$response3;\n    console.error('❌ Chat History Error:', {\n      message: error.message,\n      status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n      sessionId: sessionId\n    });\n    throw error;\n  }\n};\nexport const createNewChatSession = async (sessionName = 'New Chat') => {\n  try {\n    const response = await api.post('/chat/new-session', {\n      session_name: sessionName\n    });\n    return response.data;\n  } catch (error) {\n    console.error('❌ Create Session Error:', error);\n    throw error;\n  }\n};\nexport const getUserChatSessions = async () => {\n  try {\n    const response = await api.get('/chat/sessions');\n    return response.data;\n  } catch (error) {\n    console.error('❌ Get Sessions Error:', error);\n    throw error;\n  }\n};\nexport const renameChatSession = async (sessionId, newName) => {\n  try {\n    const response = await api.put(`/chat/session/${sessionId}/rename`, {\n      new_name: newName\n    });\n    return response.data;\n  } catch (error) {\n    console.error('❌ Rename Session Error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["api","sendChatMessage","message","sessionId","predictionContext","trim","Error","transformedContext","patientId","patient_id","riskScore","risk_score","riskCategory","risk_category","keyFactors","key_factors","response","post","session_id","prediction_context","data","error","_error$response","_error$response2","console","status","requestData","getChatHistory","limit","get","params","messages","_error$response3","createNewChatSession","sessionName","session_name","getUserChatSessions","renameChatSession","newName","put","new_name"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/services/chat.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const sendChatMessage = async (message, sessionId, predictionContext = null) => {\r\n  // Ensure message is not empty\r\n  if (!message || !message.trim()) {\r\n    throw new Error('Message cannot be empty');\r\n  }\r\n\r\n  // Ensure sessionId is valid\r\n  if (!sessionId || !sessionId.trim()) {\r\n    throw new Error('Session ID is required');\r\n  }\r\n\r\n  // Transform predictionContext to match backend schema expectations\r\n  let transformedContext = null;\r\n  if (predictionContext) {\r\n    transformedContext = {\r\n      patientId: predictionContext.patientId || predictionContext.patient_id,\r\n      riskScore: predictionContext.riskScore || predictionContext.risk_score,\r\n      riskCategory: predictionContext.riskCategory || predictionContext.risk_category,\r\n      keyFactors: predictionContext.keyFactors || predictionContext.key_factors || []\r\n    };\r\n\r\n    // Only include if we have at least some required data\r\n    if (!transformedContext.patientId && !transformedContext.riskScore && !transformedContext.riskCategory) {\r\n      transformedContext = null;\r\n    }\r\n  }\r\n\r\n  try {\r\n    const response = await api.post('/chat/message', { \r\n      message: message.trim(), // Ensure no extra whitespace\r\n      session_id: sessionId.trim(),\r\n      prediction_context: transformedContext\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    // Enhanced error logging for debugging\r\n    console.error('❌ Chat API Error:', {\r\n      message: error.message,\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n      requestData: {\r\n        message: message.trim(),\r\n        session_id: sessionId.trim(),\r\n        prediction_context: transformedContext\r\n      }\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getChatHistory = async (sessionId, limit = 50) => {\r\n  if (!sessionId || !sessionId.trim()) {\r\n    throw new Error('Session ID is required for chat history');\r\n  }\r\n\r\n  try {\r\n    const response = await api.get(`/chat/history/${sessionId.trim()}`, { \r\n      params: { limit } \r\n    });\r\n    return response.data.messages || response.data; // Handle both response formats\r\n  } catch (error) {\r\n    console.error('❌ Chat History Error:', {\r\n      message: error.message,\r\n      status: error.response?.status,\r\n      sessionId: sessionId\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const createNewChatSession = async (sessionName = 'New Chat') => {\r\n  try {\r\n    const response = await api.post('/chat/new-session', {\r\n      session_name: sessionName\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Create Session Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserChatSessions = async () => {\r\n  try {\r\n    const response = await api.get('/chat/sessions');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Get Sessions Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const renameChatSession = async (sessionId, newName) => {\r\n  try {\r\n    const response = await api.put(`/chat/session/${sessionId}/rename`, {\r\n      new_name: newName\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('❌ Rename Session Error:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}