{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\cvd-risk-project\\\\frontend\\\\cvd-risk-frontend\\\\src\\\\context\\\\ChatContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport api from '../api/axios';\nimport { useAuth } from './AuthContext';\nimport { useAppContext } from './AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(null);\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const {\n    addToChatHistory,\n    getChatHistory,\n    clearChatHistory\n  } = useAppContext();\n  const [sessions, setSessions] = useState([]);\n  const [loadingSessions, setLoadingSessions] = useState(true);\n  const [errorSessions, setErrorSessions] = useState(null);\n  const [currentPrediction, setCurrentPrediction] = useState(null);\n  const [activeSessionId, setActiveSessionId] = useState(null);\n  const [currentConversation, setCurrentConversation] = useState([]);\n  const fetchSessions = useCallback(async () => {\n    if (!isAuthenticated) {\n      setSessions([]);\n      setLoadingSessions(false);\n      setErrorSessions(\"Not authenticated.\");\n      return;\n    }\n    setLoadingSessions(true);\n    setErrorSessions(null);\n    try {\n      const response = await api.get('/chat/sessions');\n      setSessions(response.data);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Failed to load chat sessions:', error);\n      setErrorSessions(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Failed to load chat sessions.');\n      setSessions([]);\n    } finally {\n      setLoadingSessions(false);\n    }\n  }, [isAuthenticated]);\n  useEffect(() => {\n    fetchSessions();\n  }, [fetchSessions]);\n\n  // Load conversation when active session changes\n  useEffect(() => {\n    if (activeSessionId) {\n      const savedConversation = getChatHistory(activeSessionId);\n      setCurrentConversation(savedConversation);\n    } else {\n      setCurrentConversation([]);\n    }\n  }, [activeSessionId, getChatHistory]);\n  const createSession = useCallback(async title => {\n    if (!isAuthenticated) {\n      setErrorSessions(\"Not authenticated. Cannot create session.\");\n      throw new Error(\"Not authenticated.\");\n    }\n    try {\n      const response = await api.post('/chat/sessions', {\n        title\n      });\n      setSessions(prevSessions => [...prevSessions, response.data]);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Failed to create chat session:', error);\n      setErrorSessions(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Failed to create chat session.');\n      throw error;\n    }\n  }, [isAuthenticated]);\n\n  // Enhanced message handling with persistence\n  const addMessage = useCallback(message => {\n    const messageWithId = {\n      id: Date.now() + Math.random(),\n      timestamp: new Date().toISOString(),\n      ...message\n    };\n    setCurrentConversation(prev => [...prev, messageWithId]);\n\n    // Persist to AppContext\n    if (activeSessionId) {\n      addToChatHistory(activeSessionId, messageWithId);\n    }\n    return messageWithId;\n  }, [activeSessionId, addToChatHistory]);\n  const sendMessage = useCallback(async (message, sessionId) => {\n    if (!isAuthenticated || !sessionId) {\n      throw new Error(\"Not authenticated or no session selected.\");\n    }\n    try {\n      // Add user message to conversation\n      const userMessage = addMessage({\n        role: 'user',\n        content: message,\n        sessionId\n      });\n\n      // Make API call to get response\n      const response = await api.post(`/chat/sessions/${sessionId}/messages`, {\n        message,\n        prediction_context: currentPrediction\n      });\n\n      // Add assistant response to conversation\n      const assistantMessage = addMessage({\n        role: 'assistant',\n        content: response.data.response,\n        sessionId,\n        metadata: response.data.metadata || {}\n      });\n      return {\n        userMessage,\n        assistantMessage\n      };\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      throw error;\n    }\n  }, [isAuthenticated, currentPrediction, addMessage]);\n  const switchSession = useCallback(sessionId => {\n    setActiveSessionId(sessionId);\n  }, []);\n  const clearCurrentSession = useCallback(() => {\n    if (activeSessionId) {\n      clearChatHistory(activeSessionId);\n      setCurrentConversation([]);\n    }\n  }, [activeSessionId, clearChatHistory]);\n  const deleteSession = useCallback(async sessionId => {\n    if (!isAuthenticated) {\n      throw new Error(\"Not authenticated.\");\n    }\n    try {\n      await api.delete(`/chat/sessions/${sessionId}`);\n      setSessions(prev => prev.filter(session => session.id !== sessionId));\n\n      // Clear from local storage\n      clearChatHistory(sessionId);\n\n      // If this was the active session, clear it\n      if (activeSessionId === sessionId) {\n        setActiveSessionId(null);\n        setCurrentConversation([]);\n      }\n    } catch (error) {\n      console.error('Failed to delete session:', error);\n      throw error;\n    }\n  }, [isAuthenticated, activeSessionId, clearChatHistory]);\n  const getSessionHistory = useCallback(async sessionId => {\n    if (!isAuthenticated) {\n      throw new Error(\"Not authenticated.\");\n    }\n    try {\n      const response = await api.get(`/chat/sessions/${sessionId}/messages`);\n\n      // Update local storage with server data\n      const messages = response.data.messages || [];\n      messages.forEach(message => {\n        addToChatHistory(sessionId, message);\n      });\n      return messages;\n    } catch (error) {\n      console.error('Failed to fetch session history:', error);\n      // Fallback to local storage\n      return getChatHistory(sessionId);\n    }\n  }, [isAuthenticated, addToChatHistory, getChatHistory]);\n  const value = {\n    // Existing functionality\n    sessions,\n    loadingSessions,\n    errorSessions,\n    fetchSessions,\n    createSession,\n    currentPrediction,\n    setCurrentPrediction,\n    // Enhanced functionality\n    activeSessionId,\n    currentConversation,\n    switchSession,\n    addMessage,\n    sendMessage,\n    clearCurrentSession,\n    deleteSession,\n    getSessionHistory\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 10\n  }, this);\n};\n_s(ChatProvider, \"I2ICiQTj4iWv6PFIClWaCHx2EiA=\", false, function () {\n  return [useAuth, useAppContext];\n});\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","useCallback","api","useAuth","useAppContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","user","isAuthenticated","addToChatHistory","getChatHistory","clearChatHistory","sessions","setSessions","loadingSessions","setLoadingSessions","errorSessions","setErrorSessions","currentPrediction","setCurrentPrediction","activeSessionId","setActiveSessionId","currentConversation","setCurrentConversation","fetchSessions","response","get","data","error","_error$response","_error$response$data","console","detail","savedConversation","createSession","title","Error","post","prevSessions","_error$response2","_error$response2$data","addMessage","message","messageWithId","id","Date","now","Math","random","timestamp","toISOString","prev","sendMessage","sessionId","userMessage","role","content","prediction_context","assistantMessage","metadata","switchSession","clearCurrentSession","deleteSession","delete","filter","session","getSessionHistory","messages","forEach","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/context/ChatContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport api from '../api/axios';\r\nimport { useAuth } from './AuthContext';\r\nimport { useAppContext } from './AppContext';\r\n\r\nconst ChatContext = createContext(null);\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const { user, isAuthenticated } = useAuth();\r\n  const { addToChatHistory, getChatHistory, clearChatHistory } = useAppContext();\r\n  \r\n  const [sessions, setSessions] = useState([]);\r\n  const [loadingSessions, setLoadingSessions] = useState(true);\r\n  const [errorSessions, setErrorSessions] = useState(null);\r\n  const [currentPrediction, setCurrentPrediction] = useState(null);\r\n  const [activeSessionId, setActiveSessionId] = useState(null);\r\n  const [currentConversation, setCurrentConversation] = useState([]);\r\n\r\n  const fetchSessions = useCallback(async () => {\r\n    if (!isAuthenticated) {\r\n      setSessions([]);\r\n      setLoadingSessions(false);\r\n      setErrorSessions(\"Not authenticated.\");\r\n      return;\r\n    }\r\n\r\n    setLoadingSessions(true);\r\n    setErrorSessions(null);\r\n    try {\r\n      const response = await api.get('/chat/sessions');\r\n      setSessions(response.data);\r\n    } catch (error) {\r\n      console.error('Failed to load chat sessions:', error);\r\n      setErrorSessions(error.response?.data?.detail || 'Failed to load chat sessions.');\r\n      setSessions([]);\r\n    } finally {\r\n      setLoadingSessions(false);\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, [fetchSessions]);\r\n\r\n  // Load conversation when active session changes\r\n  useEffect(() => {\r\n    if (activeSessionId) {\r\n      const savedConversation = getChatHistory(activeSessionId);\r\n      setCurrentConversation(savedConversation);\r\n    } else {\r\n      setCurrentConversation([]);\r\n    }\r\n  }, [activeSessionId, getChatHistory]);\r\n\r\n  const createSession = useCallback(async (title) => {\r\n    if (!isAuthenticated) {\r\n      setErrorSessions(\"Not authenticated. Cannot create session.\");\r\n      throw new Error(\"Not authenticated.\");\r\n    }\r\n    try {\r\n      const response = await api.post('/chat/sessions', { title });\r\n      setSessions((prevSessions) => [...prevSessions, response.data]);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to create chat session:', error);\r\n      setErrorSessions(error.response?.data?.detail || 'Failed to create chat session.');\r\n      throw error;\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  // Enhanced message handling with persistence\r\n  const addMessage = useCallback((message) => {\r\n    const messageWithId = {\r\n      id: Date.now() + Math.random(),\r\n      timestamp: new Date().toISOString(),\r\n      ...message\r\n    };\r\n\r\n    setCurrentConversation(prev => [...prev, messageWithId]);\r\n    \r\n    // Persist to AppContext\r\n    if (activeSessionId) {\r\n      addToChatHistory(activeSessionId, messageWithId);\r\n    }\r\n    \r\n    return messageWithId;\r\n  }, [activeSessionId, addToChatHistory]);\r\n\r\n  const sendMessage = useCallback(async (message, sessionId) => {\r\n    if (!isAuthenticated || !sessionId) {\r\n      throw new Error(\"Not authenticated or no session selected.\");\r\n    }\r\n\r\n    try {\r\n      // Add user message to conversation\r\n      const userMessage = addMessage({\r\n        role: 'user',\r\n        content: message,\r\n        sessionId\r\n      });\r\n\r\n      // Make API call to get response\r\n      const response = await api.post(`/chat/sessions/${sessionId}/messages`, {\r\n        message,\r\n        prediction_context: currentPrediction\r\n      });\r\n\r\n      // Add assistant response to conversation\r\n      const assistantMessage = addMessage({\r\n        role: 'assistant',\r\n        content: response.data.response,\r\n        sessionId,\r\n        metadata: response.data.metadata || {}\r\n      });\r\n\r\n      return { userMessage, assistantMessage };\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n      throw error;\r\n    }\r\n  }, [isAuthenticated, currentPrediction, addMessage]);\r\n\r\n  const switchSession = useCallback((sessionId) => {\r\n    setActiveSessionId(sessionId);\r\n  }, []);\r\n\r\n  const clearCurrentSession = useCallback(() => {\r\n    if (activeSessionId) {\r\n      clearChatHistory(activeSessionId);\r\n      setCurrentConversation([]);\r\n    }\r\n  }, [activeSessionId, clearChatHistory]);\r\n\r\n  const deleteSession = useCallback(async (sessionId) => {\r\n    if (!isAuthenticated) {\r\n      throw new Error(\"Not authenticated.\");\r\n    }\r\n\r\n    try {\r\n      await api.delete(`/chat/sessions/${sessionId}`);\r\n      setSessions(prev => prev.filter(session => session.id !== sessionId));\r\n      \r\n      // Clear from local storage\r\n      clearChatHistory(sessionId);\r\n      \r\n      // If this was the active session, clear it\r\n      if (activeSessionId === sessionId) {\r\n        setActiveSessionId(null);\r\n        setCurrentConversation([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to delete session:', error);\r\n      throw error;\r\n    }\r\n  }, [isAuthenticated, activeSessionId, clearChatHistory]);\r\n\r\n  const getSessionHistory = useCallback(async (sessionId) => {\r\n    if (!isAuthenticated) {\r\n      throw new Error(\"Not authenticated.\");\r\n    }\r\n\r\n    try {\r\n      const response = await api.get(`/chat/sessions/${sessionId}/messages`);\r\n      \r\n      // Update local storage with server data\r\n      const messages = response.data.messages || [];\r\n      messages.forEach(message => {\r\n        addToChatHistory(sessionId, message);\r\n      });\r\n      \r\n      return messages;\r\n    } catch (error) {\r\n      console.error('Failed to fetch session history:', error);\r\n      // Fallback to local storage\r\n      return getChatHistory(sessionId);\r\n    }\r\n  }, [isAuthenticated, addToChatHistory, getChatHistory]);\r\n\r\n  const value = {\r\n    // Existing functionality\r\n    sessions,\r\n    loadingSessions,\r\n    errorSessions,\r\n    fetchSessions,\r\n    createSession,\r\n    currentPrediction,\r\n    setCurrentPrediction,\r\n    \r\n    // Enhanced functionality\r\n    activeSessionId,\r\n    currentConversation,\r\n    switchSession,\r\n    addMessage,\r\n    sendMessage,\r\n    clearCurrentSession,\r\n    deleteSession,\r\n    getSessionHistory\r\n  };\r\n\r\n  return <ChatContext.Provider value={value}>{children}</ChatContext.Provider>;\r\n};\r\n\r\nexport const useChat = () => {\r\n  const context = useContext(ChatContext);\r\n  if (!context) {\r\n    throw new Error('useChat must be used within a ChatProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}