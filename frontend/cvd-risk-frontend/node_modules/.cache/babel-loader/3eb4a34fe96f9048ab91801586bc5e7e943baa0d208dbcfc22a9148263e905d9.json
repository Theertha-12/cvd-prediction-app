{"ast":null,"code":"import api from './api';\nexport const predictCvdRisk = async data => {\n  try {\n    const response = await api.post('/predict/single', data);\n    // Return both the prediction result and the form data\n    return {\n      ...response.data,\n      formData: data\n    };\n  } catch (error) {\n    console.error('Prediction error:', error);\n    throw error;\n  }\n};\nexport const getPredictionHistory = async (limit = 10) => {\n  const response = await api.get('/predict/history', {\n    params: {\n      limit\n    }\n  });\n  return response.data;\n};\nexport const processBatchPrediction = async formData => {\n  const response = await api.post('/batch/predict-csv', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  });\n  return response.data;\n};\nexport const savePredictionResult = async predictionId => {\n  const response = await api.post(`/predict/save/${predictionId}`);\n  return response.data;\n};\nexport const downloadPredictionReport = async predictionId => {\n  const response = await api.get(`/predict/report/${predictionId}`, {\n    responseType: 'blob'\n  });\n  return response.data;\n};","map":{"version":3,"names":["api","predictCvdRisk","data","response","post","formData","error","console","getPredictionHistory","limit","get","params","processBatchPrediction","headers","savePredictionResult","predictionId","downloadPredictionReport","responseType"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/services/predict.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const predictCvdRisk = async (data) => {\r\n  try {\r\n    const response = await api.post('/predict/single', data);\r\n    // Return both the prediction result and the form data\r\n    return {\r\n      ...response.data,\r\n      formData: data\r\n    };\r\n  } catch (error) {\r\n    console.error('Prediction error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getPredictionHistory = async (limit = 10) => {\r\n  const response = await api.get('/predict/history', { params: { limit } });\r\n  return response.data;\r\n};\r\n\r\nexport const processBatchPrediction = async (formData) => {\r\n  const response = await api.post('/batch/predict-csv', formData, {\r\n    headers: {\r\n      'Content-Type': 'multipart/form-data'\r\n    }\r\n  });\r\n  return response.data;\r\n};\r\n\r\nexport const savePredictionResult = async (predictionId) => {\r\n  const response = await api.post(`/predict/save/${predictionId}`);\r\n  return response.data;\r\n};\r\n\r\nexport const downloadPredictionReport = async (predictionId) => {\r\n  const response = await api.get(`/predict/report/${predictionId}`, {\r\n    responseType: 'blob'\r\n  });\r\n  return response.data;\r\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAEvB,OAAO,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,iBAAiB,EAAEF,IAAI,CAAC;IACxD;IACA,OAAO;MACL,GAAGC,QAAQ,CAACD,IAAI;MAChBG,QAAQ,EAAEH;IACZ,CAAC;EACH,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAK;EACxD,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,kBAAkB,EAAE;IAAEC,MAAM,EAAE;MAAEF;IAAM;EAAE,CAAC,CAAC;EACzE,OAAON,QAAQ,CAACD,IAAI;AACtB,CAAC;AAED,OAAO,MAAMU,sBAAsB,GAAG,MAAOP,QAAQ,IAAK;EACxD,MAAMF,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,oBAAoB,EAAEC,QAAQ,EAAE;IAC9DQ,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,OAAOV,QAAQ,CAACD,IAAI;AACtB,CAAC;AAED,OAAO,MAAMY,oBAAoB,GAAG,MAAOC,YAAY,IAAK;EAC1D,MAAMZ,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,iBAAiBW,YAAY,EAAE,CAAC;EAChE,OAAOZ,QAAQ,CAACD,IAAI;AACtB,CAAC;AAED,OAAO,MAAMc,wBAAwB,GAAG,MAAOD,YAAY,IAAK;EAC9D,MAAMZ,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,mBAAmBK,YAAY,EAAE,EAAE;IAChEE,YAAY,EAAE;EAChB,CAAC,CAAC;EACF,OAAOd,QAAQ,CAACD,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}