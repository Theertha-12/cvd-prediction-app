{"ast":null,"code":"import api from './api';\nexport const getDashboardData = async userRole => {\n  try {\n    // Try the specific role endpoint first\n    const primaryEndpoint = userRole === 'doctor' ? '/dashboard/doctor' : '/dashboard/patient';\n    console.log(`📊 Trying primary dashboard endpoint: ${primaryEndpoint}`);\n    const response = await api.get(primaryEndpoint);\n    console.log('✅ Dashboard API response:', response.data);\n\n    // Validate response structure\n    if (!response.data) {\n      throw new Error('No data received from server');\n    }\n\n    // Ensure required fields exist\n    const data = {\n      user_info: response.data.user_info || {},\n      statistics: response.data.statistics || {\n        total_predictions: 0,\n        recent_predictions: 0,\n        recent_activity: 0,\n        total_patients: userRole === 'doctor' ? 0 : null,\n        risk_distribution: {\n          High: 0,\n          Moderate: 0,\n          Low: 0\n        }\n      },\n      latest_prediction: response.data.latest_prediction || null,\n      recent_predictions: response.data.recent_predictions || [],\n      recent_activities: response.data.recent_activities || []\n    };\n    return data;\n  } catch (error) {\n    console.error('Primary dashboard endpoint failed:', error);\n\n    // Try fallback endpoints\n    const fallbackEndpoints = ['/dashboard', '/api/dashboard', `/api/dashboard/${userRole}`];\n    for (const endpoint of fallbackEndpoints) {\n      try {\n        console.log(`📊 Trying fallback endpoint: ${endpoint}`);\n        const response = await api.get(endpoint);\n        console.log(`✅ Success with fallback endpoint: ${endpoint}`);\n        const data = {\n          user_info: response.data.user_info || {},\n          statistics: response.data.statistics || {\n            total_predictions: 0,\n            recent_predictions: 0,\n            recent_activity: 0,\n            total_patients: userRole === 'doctor' ? 0 : null,\n            risk_distribution: {\n              High: 0,\n              Moderate: 0,\n              Low: 0\n            }\n          },\n          latest_prediction: response.data.latest_prediction || null,\n          recent_predictions: response.data.recent_predictions || [],\n          recent_activities: response.data.recent_activities || []\n        };\n        return data;\n      } catch (fallbackError) {\n        var _fallbackError$respon;\n        console.log(`❌ Fallback endpoint ${endpoint} failed:`, (_fallbackError$respon = fallbackError.response) === null || _fallbackError$respon === void 0 ? void 0 : _fallbackError$respon.status);\n        continue;\n      }\n    }\n\n    // If all endpoints fail, try to construct from other APIs\n    console.log('📊 All dashboard endpoints failed, trying to construct from other APIs...');\n    return await constructDashboardFromOtherAPIs(userRole);\n  }\n};\n\n// Fallback: construct dashboard data from other available APIs\nconst constructDashboardFromOtherAPIs = async userRole => {\n  try {\n    console.log('📊 Constructing dashboard from available APIs...');\n    const dashboardData = {\n      user_info: {},\n      statistics: {\n        total_predictions: 0,\n        recent_predictions: 0,\n        recent_activity: 0,\n        total_patients: userRole === 'doctor' ? 0 : null,\n        risk_distribution: {\n          High: 0,\n          Moderate: 0,\n          Low: 0\n        }\n      },\n      latest_prediction: null,\n      recent_predictions: [],\n      recent_activities: []\n    };\n\n    // Try to get user info\n    try {\n      const userResponse = await api.get('/user/profile');\n      dashboardData.user_info = userResponse.data;\n      console.log('✅ Got user info from /user/profile');\n    } catch (error) {\n      console.log('❌ /user/profile not available');\n      try {\n        const authResponse = await api.get('/auth/me');\n        dashboardData.user_info = authResponse.data;\n        console.log('✅ Got user info from /auth/me');\n      } catch (error) {\n        console.log('❌ /auth/me not available');\n      }\n    }\n\n    // Try to get prediction history\n    try {\n      const predictionsResponse = await api.get('/predict/history');\n      const predictions = predictionsResponse.data;\n      if (Array.isArray(predictions)) {\n        dashboardData.recent_predictions = predictions.slice(0, 5);\n        dashboardData.latest_prediction = predictions[0] || null;\n        dashboardData.statistics.total_predictions = predictions.length;\n        dashboardData.statistics.recent_predictions = predictions.filter(p => {\n          const daysDiff = (new Date() - new Date(p.created_at)) / (1000 * 60 * 60 * 24);\n          return daysDiff <= 7;\n        }).length;\n\n        // Calculate risk distribution\n        const riskCounts = {\n          High: 0,\n          Moderate: 0,\n          Low: 0\n        };\n        predictions.forEach(p => {\n          if (p.risk_category && riskCounts.hasOwnProperty(p.risk_category)) {\n            riskCounts[p.risk_category]++;\n          }\n        });\n        dashboardData.statistics.risk_distribution = riskCounts;\n      }\n      console.log('✅ Got predictions from /predict/history');\n    } catch (error) {\n      console.log('❌ /predict/history not available');\n    }\n\n    // Try to get patient list (for doctors)\n    if (userRole === 'doctor') {\n      try {\n        const patientsResponse = await api.get('/patients');\n        if (Array.isArray(patientsResponse.data)) {\n          dashboardData.statistics.total_patients = patientsResponse.data.length;\n        }\n        console.log('✅ Got patients from /patients');\n      } catch (error) {\n        console.log('❌ /patients not available');\n      }\n    }\n\n    // Create some recent activities based on available data\n    dashboardData.recent_activities = generateActivitiesFromData(dashboardData, userRole);\n    dashboardData.statistics.recent_activity = dashboardData.recent_activities.length;\n    console.log('📊 Constructed dashboard data:', dashboardData);\n    return dashboardData;\n  } catch (error) {\n    var _error$response, _error$response2, _error$response3;\n    console.error('Failed to construct dashboard data:', error);\n\n    // Create a more specific error message\n    let errorMessage = 'No dashboard or related endpoints available';\n    if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 500) {\n      errorMessage = 'Server error - please check backend';\n    } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401) {\n      errorMessage = 'Authentication required - please login';\n    } else if (!error.response) {\n      errorMessage = 'Backend server not reachable - check if it\\'s running';\n    }\n    const enhancedError = new Error(errorMessage);\n    enhancedError.originalError = error;\n    enhancedError.status = (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status;\n    throw enhancedError;\n  }\n};\nconst generateActivitiesFromData = (data, userRole) => {\n  const activities = [];\n  if (data.latest_prediction) {\n    activities.push({\n      id: 1,\n      description: userRole === 'doctor' ? 'Patient risk assessment completed' : 'CVD risk prediction completed',\n      target: `${data.latest_prediction.risk_percentage}% risk level`,\n      date: data.latest_prediction.created_at || new Date().toISOString()\n    });\n  }\n  if (data.recent_predictions && data.recent_predictions.length > 1) {\n    activities.push({\n      id: 2,\n      description: 'Previous prediction reviewed',\n      target: 'Historical data accessed',\n      date: data.recent_predictions[1].created_at || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\n    });\n  }\n\n  // Add profile activity\n  activities.push({\n    id: 3,\n    description: 'Profile accessed',\n    target: 'Dashboard viewed',\n    date: new Date().toISOString()\n  });\n  return activities;\n};","map":{"version":3,"names":["api","getDashboardData","userRole","primaryEndpoint","console","log","response","get","data","Error","user_info","statistics","total_predictions","recent_predictions","recent_activity","total_patients","risk_distribution","High","Moderate","Low","latest_prediction","recent_activities","error","fallbackEndpoints","endpoint","fallbackError","_fallbackError$respon","status","constructDashboardFromOtherAPIs","dashboardData","userResponse","authResponse","predictionsResponse","predictions","Array","isArray","slice","length","filter","p","daysDiff","Date","created_at","riskCounts","forEach","risk_category","hasOwnProperty","patientsResponse","generateActivitiesFromData","_error$response","_error$response2","_error$response3","errorMessage","enhancedError","originalError","activities","push","id","description","target","risk_percentage","date","toISOString","now"],"sources":["C:/Users/HP/Desktop/cvd-risk-project/frontend/cvd-risk-frontend/src/services/dashboard.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const getDashboardData = async (userRole) => {\r\n  try {\r\n    // Try the specific role endpoint first\r\n    const primaryEndpoint = userRole === 'doctor' ? '/dashboard/doctor' : '/dashboard/patient';\r\n    \r\n    console.log(`📊 Trying primary dashboard endpoint: ${primaryEndpoint}`);\r\n    const response = await api.get(primaryEndpoint);\r\n    console.log('✅ Dashboard API response:', response.data);\r\n    \r\n    // Validate response structure\r\n    if (!response.data) {\r\n      throw new Error('No data received from server');\r\n    }\r\n\r\n    // Ensure required fields exist\r\n    const data = {\r\n      user_info: response.data.user_info || {},\r\n      statistics: response.data.statistics || {\r\n        total_predictions: 0,\r\n        recent_predictions: 0,\r\n        recent_activity: 0,\r\n        total_patients: userRole === 'doctor' ? 0 : null,\r\n        risk_distribution: { High: 0, Moderate: 0, Low: 0 }\r\n      },\r\n      latest_prediction: response.data.latest_prediction || null,\r\n      recent_predictions: response.data.recent_predictions || [],\r\n      recent_activities: response.data.recent_activities || []\r\n    };\r\n\r\n    return data;\r\n    \r\n  } catch (error) {\r\n    console.error('Primary dashboard endpoint failed:', error);\r\n    \r\n    // Try fallback endpoints\r\n    const fallbackEndpoints = [\r\n      '/dashboard',\r\n      '/api/dashboard',\r\n      `/api/dashboard/${userRole}`\r\n    ];\r\n\r\n    for (const endpoint of fallbackEndpoints) {\r\n      try {\r\n        console.log(`📊 Trying fallback endpoint: ${endpoint}`);\r\n        const response = await api.get(endpoint);\r\n        console.log(`✅ Success with fallback endpoint: ${endpoint}`);\r\n        \r\n        const data = {\r\n          user_info: response.data.user_info || {},\r\n          statistics: response.data.statistics || {\r\n            total_predictions: 0,\r\n            recent_predictions: 0,\r\n            recent_activity: 0,\r\n            total_patients: userRole === 'doctor' ? 0 : null,\r\n            risk_distribution: { High: 0, Moderate: 0, Low: 0 }\r\n          },\r\n          latest_prediction: response.data.latest_prediction || null,\r\n          recent_predictions: response.data.recent_predictions || [],\r\n          recent_activities: response.data.recent_activities || []\r\n        };\r\n        \r\n        return data;\r\n      } catch (fallbackError) {\r\n        console.log(`❌ Fallback endpoint ${endpoint} failed:`, fallbackError.response?.status);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // If all endpoints fail, try to construct from other APIs\r\n    console.log('📊 All dashboard endpoints failed, trying to construct from other APIs...');\r\n    return await constructDashboardFromOtherAPIs(userRole);\r\n  }\r\n};\r\n\r\n// Fallback: construct dashboard data from other available APIs\r\nconst constructDashboardFromOtherAPIs = async (userRole) => {\r\n  try {\r\n    console.log('📊 Constructing dashboard from available APIs...');\r\n    \r\n    const dashboardData = {\r\n      user_info: {},\r\n      statistics: {\r\n        total_predictions: 0,\r\n        recent_predictions: 0,\r\n        recent_activity: 0,\r\n        total_patients: userRole === 'doctor' ? 0 : null,\r\n        risk_distribution: { High: 0, Moderate: 0, Low: 0 }\r\n      },\r\n      latest_prediction: null,\r\n      recent_predictions: [],\r\n      recent_activities: []\r\n    };\r\n\r\n    // Try to get user info\r\n    try {\r\n      const userResponse = await api.get('/user/profile');\r\n      dashboardData.user_info = userResponse.data;\r\n      console.log('✅ Got user info from /user/profile');\r\n    } catch (error) {\r\n      console.log('❌ /user/profile not available');\r\n      try {\r\n        const authResponse = await api.get('/auth/me');\r\n        dashboardData.user_info = authResponse.data;\r\n        console.log('✅ Got user info from /auth/me');\r\n      } catch (error) {\r\n        console.log('❌ /auth/me not available');\r\n      }\r\n    }\r\n\r\n    // Try to get prediction history\r\n    try {\r\n      const predictionsResponse = await api.get('/predict/history');\r\n      const predictions = predictionsResponse.data;\r\n      \r\n      if (Array.isArray(predictions)) {\r\n        dashboardData.recent_predictions = predictions.slice(0, 5);\r\n        dashboardData.latest_prediction = predictions[0] || null;\r\n        dashboardData.statistics.total_predictions = predictions.length;\r\n        dashboardData.statistics.recent_predictions = predictions.filter(p => {\r\n          const daysDiff = (new Date() - new Date(p.created_at)) / (1000 * 60 * 60 * 24);\r\n          return daysDiff <= 7;\r\n        }).length;\r\n\r\n        // Calculate risk distribution\r\n        const riskCounts = { High: 0, Moderate: 0, Low: 0 };\r\n        predictions.forEach(p => {\r\n          if (p.risk_category && riskCounts.hasOwnProperty(p.risk_category)) {\r\n            riskCounts[p.risk_category]++;\r\n          }\r\n        });\r\n        dashboardData.statistics.risk_distribution = riskCounts;\r\n      }\r\n      console.log('✅ Got predictions from /predict/history');\r\n    } catch (error) {\r\n      console.log('❌ /predict/history not available');\r\n    }\r\n\r\n    // Try to get patient list (for doctors)\r\n    if (userRole === 'doctor') {\r\n      try {\r\n        const patientsResponse = await api.get('/patients');\r\n        if (Array.isArray(patientsResponse.data)) {\r\n          dashboardData.statistics.total_patients = patientsResponse.data.length;\r\n        }\r\n        console.log('✅ Got patients from /patients');\r\n      } catch (error) {\r\n        console.log('❌ /patients not available');\r\n      }\r\n    }\r\n\r\n    // Create some recent activities based on available data\r\n    dashboardData.recent_activities = generateActivitiesFromData(dashboardData, userRole);\r\n    dashboardData.statistics.recent_activity = dashboardData.recent_activities.length;\r\n\r\n    console.log('📊 Constructed dashboard data:', dashboardData);\r\n    return dashboardData;\r\n\r\n  } catch (error) {\r\n    console.error('Failed to construct dashboard data:', error);\r\n    \r\n    // Create a more specific error message\r\n    let errorMessage = 'No dashboard or related endpoints available';\r\n    if (error.response?.status === 500) {\r\n      errorMessage = 'Server error - please check backend';\r\n    } else if (error.response?.status === 401) {\r\n      errorMessage = 'Authentication required - please login';\r\n    } else if (!error.response) {\r\n      errorMessage = 'Backend server not reachable - check if it\\'s running';\r\n    }\r\n\r\n    const enhancedError = new Error(errorMessage);\r\n    enhancedError.originalError = error;\r\n    enhancedError.status = error.response?.status;\r\n    throw enhancedError;\r\n  }\r\n};\r\n\r\nconst generateActivitiesFromData = (data, userRole) => {\r\n  const activities = [];\r\n  \r\n  if (data.latest_prediction) {\r\n    activities.push({\r\n      id: 1,\r\n      description: userRole === 'doctor' ? 'Patient risk assessment completed' : 'CVD risk prediction completed',\r\n      target: `${data.latest_prediction.risk_percentage}% risk level`,\r\n      date: data.latest_prediction.created_at || new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  if (data.recent_predictions && data.recent_predictions.length > 1) {\r\n    activities.push({\r\n      id: 2,\r\n      description: 'Previous prediction reviewed',\r\n      target: 'Historical data accessed',\r\n      date: data.recent_predictions[1].created_at || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()\r\n    });\r\n  }\r\n\r\n  // Add profile activity\r\n  activities.push({\r\n    id: 3,\r\n    description: 'Profile accessed',\r\n    target: 'Dashboard viewed',\r\n    date: new Date().toISOString()\r\n  });\r\n\r\n  return activities;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}